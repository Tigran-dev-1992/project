{"version":3,"sources":["Components/commons/Input.tsx","Components/commons/CreateField.tsx","images/userPhoto.jpg","images/logo.png","API/profileApi.ts","redux/profile-reducer.ts","Components/Content/Login/Login.module.css","serviceWorker.js","API/loginApi.ts","redux/auth-reducer.tsx","redux/app-reducer.ts","redux/reduxStore.ts","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/Content/Dialogs/Dialogs.tsx","Components/commons/validators.ts","Components/Content/Login/LoginForm.tsx","Components/Content/Login/Login.tsx","Components/Content/Login/LoginContainer.tsx","Components/Content/Profile/PersonData/Contacts.tsx","Components/Content/Profile/PersonData/PersonDataForm.tsx","Components/Content/Profile/PersonData/PersonData.tsx","Components/Content/Profile/Status.tsx","Components/Content/Profile/UserImage.tsx","Components/commons/SmallPreLoader.tsx","Components/Content/Profile/Profile.tsx","redux/selectores/profile-selector.ts","Components/Content/Profile/ProfileContainer.tsx","Components/Music/Music.jsx","Components/Content/todo/TodoForm.jsx","Components/Content/todo/TodoList.jsx","Components/Content/todo/Todo.jsx","App.tsx","AppContainer.tsx","index.tsx","Components/commons/PreLoader.tsx","Components/HOCS/Hocs.tsx","Components/Content/Profile/PersonData/PersonData.module.css","Components/Content/Profile/Profile.module.css","App.module.css","Components/Navbar/Navbar.module.css","Components/commons/Input.module.css","Components/Header/Header.module.css","API/userApi.ts","redux/user-reducer.ts","Components/commons/followUnfollowFlow.ts","images/preLoader.gif","Components/commons/PreLoader.module.css","API/api.ts"],"names":["UniInput","meta","restProps","input","hasError","error","touched","className","styles","inputError","children","Input","props","inputStyle","Textarea","createField","name","placholder","validators","component","text","placeholder","validate","module","exports","profileApi","userId","instanse","get","then","response","data","status","put","file","photo","FormData","append","headers","initialState","profile","undefined","editMode","loadingInProgres","showEditButtons","actions","setProfile","type","setStatus","setPhotos","photos","setLoadingInProgres","setShowEditButtonsMode","setEditMode","getUserProfile","id","dispatch","a","getUserStatus","updateUserData","getState","auth","resultCode","message","messages","length","stopSubmit","_error","setUserStatus","loadFile","profileReducer","state","action","Boolean","window","location","hostname","match","loginApi","email","password","rememberMe","captcha","post","delete","login","captchaSrc","isAuth","loading","authActions","getAuthData","ResultCodeType","Success","authReducer","initialaiz","appActions","AppReducer","reducers","combineReducers","form","formReducer","profilePage","usersPage","UserReducer","app","store","createStore","applyMiddleware","thunkMiddleware","__store__","connect","logoutProfile","header","elements","src","logo","logout","onClick","Navbar","navbarItems","to","activeClassName","selectedItem","compose","WithClearProfileData","WithPaginatorVisibility","withRedirectToLogin","required","value","maxLength","maxLengthCreator","LoginReduxForm","reduxForm","handleSubmit","loginForm","onSubmit","field","checkbox","button","Login","useEffect","Aos","init","duration","data-aos","setLoginData","promis","Promise","all","CaptchaIsRecuired","url","PreLoader","Contacts","contacts","Object","keys","map","key","PersonData","initialValues","personData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Status","useState","inputValue","statusCursor","onChange","e","target","setStatusValue","autoFocus","onBlur","updateStatus","UserImage","large","userPhoto","img","imgButton","files","loadImage","htmlFor","SmallPreLoader","loader","small","Profile","data-aos-easing","data-aos-duration","profileSelector","idSelector","statusSelector","editModeSelector","loadingInProgresSelector","showEditButtonsSelector","ProfileContainer","this","params","history","push","prevProps","componentDidMount","React","Component","withRouter","Music","controls","TodoForm","addTodos","setValue","TodoList","todos","todo","title","Todo","setTodo","concat","complited","Date","now","console","log","UsersContainer","lazy","App","activNavbar","setNavbarStatus","burger","navbarActivate","navbar","content","path","render","fallback","AppContainer","isInitialaized","promise","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","preLoader","setShowLoader","userActions","userApi","count","page","term","friend","filter","totalCount","pageSize","porcionSize","porceNumber","currentPage","users","followInProgres","showLoader","filterVizibility","setUsers","setFilter","payload","setUsersFilter","setTotalCount","setCurrentPage","setPorceNumber","setFollowUnfollowUser","follow","setFolowInProgres","isFetching","setFilterVizibility","getUsers","items","getCurrentPage","followUnfollowUser","followUnfollowFlow","u","followed","axios","create","withCredentials","baseURL"],"mappings":"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","file":"static/js/main.28c04885.chunk.js","sourcesContent":["import React from 'react'\r\nimport { WrappedFieldProps } from 'redux-form'\r\nimport styles from './Input.module.css'\r\n\r\n\r\n// export let Input = ({meta,input, ...restProps}) => {\r\n//     let hasError = meta.error&&meta.touched\r\n\r\n//     debugger\r\n//     return (\r\n//         <div className={hasError&&styles.inputError}>\r\n//             <div >\r\n//                 <input {...input} {...restProps}  className= {hasError?styles.error:\"\" +\"\"+ styles.inputStyle}/>\r\n//             </div>\r\n// {hasError&&meta.error}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport type OwnPropsType = {\r\n    \r\n};\r\nconst UniInput:React.FunctionComponent<WrappedFieldProps&OwnPropsType> = ({ meta, input, ...restProps }) => {\r\n    let hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={hasError?styles.inputError:\"\"}>\r\n            <div >\r\n                {restProps.children}\r\n            </div>\r\n            {hasError && meta.error}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport let Input:React.FunctionComponent<WrappedFieldProps&OwnPropsType> = (props) => {\r\n    const { meta, input, ...restProps } = props\r\n    let hasError = meta.error && meta.touched\r\n    return (\r\n        <div>\r\n            <UniInput {...props}><input {...input} {...restProps} className= {hasError?styles.error:\"\" +\"\"+ styles.inputStyle} /></UniInput>\r\n        </div>\r\n    )\r\n}\r\nexport let Textarea:React.FunctionComponent<WrappedFieldProps&OwnPropsType> = (props) => {\r\n    const { meta, input, ...restProps } = props\r\n    let hasError = meta.error && meta.touched\r\n    return (\r\n        <div>\r\n            <UniInput {...props}><textarea {...input} {...restProps} className= {hasError?styles.error:\"\" +\"\"+ styles.inputStyle}/></UniInput>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { ValidatorsType } from './validators'\r\n\r\n\r\nexport function createField<FormName extends string,OwnProps={}>(\r\n    name: FormName,\r\n    placholder: string | undefined,\r\n    validators: Array<ValidatorsType>,\r\n    component: React.FC<WrappedFieldProps&OwnProps>,\r\n    props: {},\r\n    text: string){\r\n\r\n    return (\r\n        <div>\r\n            <Field name={name} placeholder={placholder} validate={validators} component={component} {...props} />{text}\r\n        </div>\r\n\r\n    )\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/userPhoto.e1529f18.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.cd9a1ab4.png\";","import { AxiosResponse } from 'axios';\r\nimport { instanse, SetStatusTextResponseType, SetUserDataResponseType, SetImageResponseType } from './api';\r\nimport { ProfileType } from \"../Components/commons/CommonsFileTypes/ProfileType\";\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number | null) {\r\n        return instanse.get(`profile/` + userId)\r\n            .then((response: AxiosResponse<ProfileType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getStatus(userId: number) {\r\n        return instanse.get(`profile/status/` + userId)\r\n            .then((response: AxiosResponse<string>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    setStatusText(status: string) {\r\n        return instanse.put(`profile/status/`, { status })\r\n            .then((response: AxiosResponse<SetStatusTextResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    setUserData(data: ProfileType) {\r\n        return instanse.put(`profile/`, data)\r\n            .then((response: AxiosResponse<SetUserDataResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    setImage(file: File) {\r\n        const photo = new FormData();\r\n        photo.append('image', file);\r\n        return instanse.put(`profile/photo/`, photo, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then((response: AxiosResponse<SetImageResponseType>) => {\r\n                return response.data;\r\n            });\r\n    }\r\n};\r\n\r\n\r\n","import { ProfileType } from \"../Components/commons/CommonsFileTypes/ProfileType\"\r\nimport { profileApi } from \"../API/profileApi\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { PhotosType } from \"./user-reducer\"\r\nimport { RootState, InferActionsType } from \"./reduxStore\"\r\n\r\n\r\n\r\nconst SET_PROFILE = 'SET_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst SET_EDIT_MODE = 'SET_EDIT_MODE'\r\nconst SET_PHOTOS = 'SET_PHOTOS'\r\nconst SET_LOADING_IN_PROGRES = 'SET_LOADING_IN_PROGRES'\r\nconst SET_SHOW_EDIT_BUTTONS_MODE = 'SET_SHOW_EDIT_BUTTONS_MODE'\r\n\r\n\r\nexport type InitialStateType = {\r\n    profile: ProfileType | null\r\n    status: string | undefined\r\n    editMode: boolean\r\n    loadingInProgres: boolean\r\n    showEditButtons: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    profile: null,\r\n    status: undefined,\r\n    editMode: false,\r\n    loadingInProgres: false,\r\n    showEditButtons: false\r\n}\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'SET_EDIT_MODE':\r\n            return {\r\n                ...state,\r\n                editMode: action.editMode\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.photos } as ProfileType\r\n            }\r\n        case 'SET_LOADING_IN_PROGRES':\r\n            return {\r\n                ...state,\r\n                loadingInProgres: action.loadingInProgres\r\n            }\r\n        case 'SET_SHOW_EDIT_BUTTONS_MODE':\r\n            return {\r\n                ...state,\r\n                showEditButtons: action.showEditButtons\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType | null) => ({ type: SET_PROFILE, profile } as const),\r\n    setStatus: (status: string) => ({ type: SET_STATUS, status } as const),\r\n    setPhotos: (photos: PhotosType) => ({ type: SET_PHOTOS, photos } as const),\r\n    setLoadingInProgres: (loadingInProgres: boolean) => ({ type: SET_LOADING_IN_PROGRES, loadingInProgres } as const),\r\n    setShowEditButtonsMode: (showEditButtons: boolean) => ({ type: SET_SHOW_EDIT_BUTTONS_MODE, showEditButtons } as const),\r\n    setEditMode: (editMode: boolean) => ({ type: SET_EDIT_MODE, editMode } as const)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const getUserProfile = (id: number | null): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let data = await profileApi.getProfile(id)\r\n    dispatch(actions.setProfile(data))\r\n    dispatch(actions.setLoadingInProgres(false))\r\n}\r\n\r\n\r\nexport const getUserStatus = (id: number): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    let data = await profileApi.getStatus(id)\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateUserData = (data: ProfileType): ThunkAction<void, RootState, unknown, ActionTypes | FormAction> => async (dispatch, getState) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let id = getState().auth.id\r\n    let response = await profileApi.setUserData(data)\r\n    if (response.resultCode === 0) {\r\n        if (id != null) {\r\n            dispatch(getUserProfile(id))\r\n        }\r\n\r\n        dispatch(actions.setEditMode(false))\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    } else {\r\n        let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"personData\", { _error: message }));\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    }\r\n}\r\n\r\n\r\nexport const setUserStatus = (status: string): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let data = await profileApi.setStatusText(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    }\r\n}\r\n\r\nexport const loadFile = (file: File): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let data = await profileApi.setImage(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setPhotos(data.data.photos))\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    }\r\n}\r\n\r\nexport default profileReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1urlf\",\"button\":\"Login_button__3Lu27\",\"checkbox\":\"Login_checkbox__19o8R\",\"field\":\"Login_field__3c7Ae\",\"loginForm\":\"Login_loginForm__iC_GM\",\"error\":\"Login_error__3yBh-\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AxiosResponse } from 'axios';\r\nimport { instanse, MainResponseType } from './api';\r\n\r\n\r\n\r\n\r\n\r\ntype AuthorizedDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype IsAuthorizedType = MainResponseType<AuthorizedDataType>\r\n\r\n\r\ntype LoginDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = MainResponseType<LoginDataType>\r\n\r\n\r\n\r\ntype CaptchaType = {\r\n    url: string\r\n}\r\n\r\n\r\nexport const loginApi = {\r\n    login({ email, password, rememberMe = false, captcha }: { email: string, password: string, rememberMe: boolean, captcha: string }) {\r\n        let data = { email, password, rememberMe, captcha };\r\n        return instanse.post(`auth/login/`, data)\r\n            .then((response: AxiosResponse<LoginResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    logout() {\r\n        return instanse.delete(`auth/login`)\r\n            .then((response: AxiosResponse<MainResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    isAuthorized() {\r\n        return instanse.get(`auth/me`)\r\n            .then((response: AxiosResponse<IsAuthorizedType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getCaptcha() {\r\n        return instanse.get('/security/get-captcha-url')\r\n            .then((response: AxiosResponse<CaptchaType>) => {\r\n                return response.data\r\n            })\r\n    }\r\n};\r\n","import { loginApi } from \"../API/loginApi\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\nimport { ResultCodeType } from \"../API/api\"\r\n\r\nconst SET_AUTH_DATA = \"SET_AUTH_DATA\"\r\nconst SET_LOADING = \"SET_LOADING\"\r\n\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    login: null as null | string,\r\n    email: null as null | string,\r\n    captchaSrc: null as null | string,\r\n    isAuth: false,\r\n    loading: false\r\n}\r\nexport type AuthInitialStateType = typeof initialState\r\nconst authReducer = (state = initialState, action: AuthActionTypes): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_AUTH_DATA\":\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                login: action.login,\r\n                email: action.email,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        case 'SET_CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captchaSrc: action.captchaSrc\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nconst authActions = {\r\n    setAuthData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({ type: SET_AUTH_DATA, id, login, email, isAuth, } as const),\r\n    setLoading: (loading: boolean) => ({ type: SET_LOADING, loading } as const),\r\n    setCaptcha: (captchaSrc: string|null) => ({ type: 'SET_CAPTCHA', captchaSrc } as const)\r\n}\r\n\r\n\r\nexport type AuthActionTypes = InferActionsType<typeof authActions>\r\n\r\nexport let setLoginData = (email: string, password: string, rememberMe: boolean, captcha: string):\r\n    ThunkAction<void, RootState, unknown, AuthActionTypes | FormAction> => {\r\n    return (dispatch) => {\r\n        dispatch(authActions.setLoading(true))\r\n        loginApi.login({ email, password, rememberMe, captcha })\r\n            .then(data => {\r\n                if (data.resultCode === ResultCodeType.Success) {\r\n                    let promis = dispatch(getAuthData())\r\n                    Promise.all([promis])\r\n                        .then(() => {\r\n                            dispatch(authActions.setLoading(false))\r\n                            dispatch(authActions.setCaptcha(null))\r\n                        })\r\n                }\r\n                else if (data.resultCode = ResultCodeType.CaptchaIsRecuired) {\r\n                    loginApi.getCaptcha()\r\n                        .then(data => {\r\n                            debugger\r\n                            dispatch(authActions.setCaptcha(data.url))\r\n                            dispatch(authActions.setLoading(false))\r\n                        })\r\n                }\r\n                else {\r\n                    dispatch(authActions.setLoading(false))\r\n                    let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n                    dispatch(stopSubmit(\"login\", { _error: message }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport let getAuthData = (): ThunkAction<void, RootState, unknown, AuthActionTypes> => (dispatch) => {\r\n    return loginApi.isAuthorized()\r\n        .then(data => {\r\n            if (data.resultCode === ResultCodeType.Success) {\r\n                dispatch(authActions.setAuthData(data.data.id, data.data.login, data.data.email, true))\r\n                dispatch(authActions.setLoading(false))\r\n            }\r\n        }\r\n        )\r\n}\r\nexport let logoutProfile = (): ThunkAction<void, RootState, unknown, AuthActionTypes> => (dispatch) => {\r\n    loginApi.logout()\r\n        .then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(authActions.setAuthData(null, null, null, false))\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport default authReducer","import { ThunkAction } from \"redux-thunk\"\r\nimport { getAuthData,AuthActionTypes,AuthInitialStateType } from \"./auth-reducer\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\n\r\n\r\nconst SET_INITIALAIZ = \"SET_INITIALAIZ\"\r\n\r\ntype InitialStateType = {\r\n    initialaiz : boolean\r\n}\r\nconst initialState = {\r\n    initialaiz: false\r\n}\r\n\r\n\r\nconst AppReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'SET_INITIALAIZ':\r\n            return {\r\n                ...state,\r\n                initialaiz: action.initialaiz\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst appActions= {\r\n    setInitialaiz : (initialaiz : boolean)=> ({ type: SET_INITIALAIZ, initialaiz }as const)\r\n}\r\n\r\ntype ActionsType = InferActionsType<typeof appActions>\r\nexport const isInitialaized = ()  :ThunkAction<void,RootState,unknown,ActionsType>=> (dispatch) => {\r\n let  promise=  dispatch(getAuthData())\r\n Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(appActions.setInitialaiz(true))\r\n        })\r\n}\r\n\r\nexport default AppReducer","import authReducer from \"./auth-reducer\"\r\nimport { createStore, applyMiddleware } from \"redux\"\r\nimport { combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\"\r\nimport UserReducer from \"./user-reducer\"\r\nimport AppReducer from \"./app-reducer\"\r\n\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: UserReducer,\r\n    app: AppReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n\r\ntype ProprtisType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<ProprtisType<T>>\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store","import React from 'react'\r\nimport  styles from './Header.module.css' \r\nimport logo from '../../images/logo.png'\r\nimport { connect } from 'react-redux'\r\nimport {logoutProfile} from '../../redux/auth-reducer'\r\nimport { RootState } from '../../redux/reduxStore'\r\n\r\n\r\ntype PropsType = {\r\n    isAuth : boolean\r\n    logoutProfile: ()=>void\r\n}\r\nconst Header :React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <div className={styles.elements}>\r\n                <img src={logo} className={styles.logo} />\r\n                {props.isAuth&&<div className={styles.logout} onClick = {props.logoutProfile}>Logout</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype MapStateToPropsType ={\r\n    isAuth : boolean\r\n}\r\ntype MapDispatchToPropsType ={\r\n    logoutProfile :()=>void\r\n}\r\nlet mapStateToProps = (state:RootState):MapStateToPropsType=>{\r\n    return{\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\nexport default  connect<MapStateToPropsType, MapDispatchToPropsType, {},RootState>(mapStateToProps,{logoutProfile})(Header) ","import React from 'react'\r\nimport styles from './Navbar.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = ()=>{\r\n    return (\r\n        <div className = {styles.navbarItems}>\r\n            <div ><NavLink to ='/profile' activeClassName={styles.selectedItem}>Profile</NavLink></div>\r\n            <div><NavLink to ='/dialogs' activeClassName={styles.selectedItem}>Dialogs</NavLink></div>\r\n            <div><NavLink to ='/users' activeClassName={styles.selectedItem}>Users</NavLink></div>\r\n            <div><NavLink to ='/music' activeClassName={styles.selectedItem}>Music</NavLink></div>\r\n            <div><NavLink to ='/setting' activeClassName={styles.selectedItem}>Setting</NavLink></div>\r\n          \r\n          \r\n        \r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Navbar","import React from 'react'\r\nimport { WithPaginatorVisibility, withRedirectToLogin, WithClearProfileData } from '../../HOCS/Hocs'\r\nimport { compose } from 'redux'\r\n\r\nconst Dialogs = (   ) => {\r\n    return (\r\n        <div>\r\n            <h1>\r\n Herr will be Dialogs\r\n            </h1>\r\n           \r\n        </div>\r\n    )\r\n}\r\nexport default compose<React.ComponentType>(WithClearProfileData, WithPaginatorVisibility,withRedirectToLogin)(Dialogs) ","\r\ntype MaxLengthType = (maxLength: number) => (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator:MaxLengthType = (maxLength)=> (value)=> {\r\n    if(value&&value.length>maxLength){\r\n        return ` max length ${maxLength} simbol`\r\n    }\r\n    return undefined\r\n}\r\ntype RecuiredType = (value: string) => string | undefined\r\n\r\nexport const required:RecuiredType= (value) => (value? undefined : 'Required')\r\nexport type ValidatorsType = MaxLengthType|RecuiredType\r\n// export const maxLengthCreator = (lengthNum) =>{ \r\n//     return(\r\n//         (value) =>{\r\n//         if(!value||value.length<lengthNum) return undefined;\r\n//         return` Max lenght is ${lengthNum} simbol!!!`\r\n//         }\r\n//     )\r\n   \r\n// }","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport styles from './Login.module.css'\r\nimport { Input } from '../../commons/Input'\r\nimport { maxLengthCreator, required } from '../../commons/validators'\r\nimport { createField } from '../../commons/CreateField'\r\nimport { LoginDataValueType} from './Login'\r\n\r\n\r\n\r\ntype PropsType= {\r\n    captchaSrc: string|null\r\n}\r\nconst maxLength = maxLengthCreator(25)\r\n\r\ntype NameType = Extract<keyof LoginDataValueType, string>\r\nconst LoginForm: React.FunctionComponent<InjectedFormProps<LoginDataValueType,PropsType>&PropsType> = ({ handleSubmit, error ,captchaSrc} ) => {\r\n    return (\r\n        <div className={styles.loginForm}>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className={styles.field}>\r\n                    {createField<NameType>(\"email\", 'email', [maxLength, required], Input, {}, \"\")}\r\n                </div>\r\n                <div className={styles.field}>\r\n                    {createField<NameType>('password', 'password', [maxLength, required], Input, { type: 'password' }, \"\")}\r\n                </div>\r\n                {captchaSrc\r\n                    ? <div className={styles.field}>\r\n                        {createField<NameType>('captcha', 'captcha', [maxLength, required], Input, {}, \"\")}\r\n                        <img src={captchaSrc} />\r\n                    </div>\r\n                    : \"\"\r\n                }\r\n                <div className={styles.checkbox}>\r\n                    {createField<NameType>('rememberMe', \"\", [], Input, { type: 'checkbox' }, 'Remember')}\r\n                </div>\r\n                <button className={styles.button}>Go to profile</button>\r\n            </form>\r\n            {error && <div className={styles.error}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginDataValueType, PropsType>({ form: 'login' })(LoginForm)\r\n\r\nexport default LoginReduxForm\r\n","import React from 'react'\r\nimport LoginReduxForm from './LoginForm'\r\nimport styles from './Login.module.css'\r\nimport Aos from 'aos'\r\nimport 'aos/dist/aos.css'\r\nimport { useEffect } from 'react'\r\n\r\n\r\nexport type LoginDataValueType ={email : string,password: string,rememberMe : boolean,captcha : string}\r\nexport type SetLoginDataType =(email : string,password: string,rememberMe : boolean,captcha :string)=>void\r\nexport type LoginPropsType = {\r\n    setLoginData : (email : string,password: string,rememberMe : boolean,captcha : string)=>void\r\n    captchaSrc: string|null\r\n}\r\nconst Login :React.FC<LoginPropsType> = (props) =>{\r\n    useEffect(() => {\r\n        Aos.init({ duration: 1500 })\r\n    }, [])\r\n    let setData = (value:LoginDataValueType)=>{\r\n        props.setLoginData(value.email,value.password,value.rememberMe,value.captcha)\r\n    }\r\n    return (\r\n        <div className ={styles.login} data-aos='zoom-in'>\r\n            <h2>Are you registrated?</h2>\r\n            <LoginReduxForm onSubmit ={setData}  captchaSrc={props.captchaSrc}  />\r\n            <br/>\r\n\r\n            (email:   tikokarap@mail.ru)<br/>\r\n            (pasword: it9284593272)\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport Login from './Login';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PreLoader from '../../commons/PreLoader';\r\nimport { compose } from 'redux';\r\nimport { WithClearProfileData } from '../../HOCS/Hocs';\r\nimport { RootState } from '../../../redux/reduxStore';\r\nimport {setLoginData} from '../../../redux/auth-reducer'\r\n\r\nconst LoginContainer: React.FunctionComponent<PropsType> = (props) => {\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile' />;\r\n    } else if (props.loading) {\r\n        return <PreLoader />;\r\n    }\r\n    return (\r\n        <Login setLoginData={props.setLoginData} captchaSrc = {props.captchaSrc}/>\r\n\r\n    );\r\n};\r\ntype OwnPropsType = {};\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean;\r\n    loading: boolean;\r\n    captchaSrc : string|null\r\n};\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        loading: state.auth.loading,\r\n        captchaSrc:state.auth.captchaSrc\r\n    };\r\n};\r\ntype MapDispatchToPropsType = {\r\n    setLoginData: (email: string, password: string, rememberMe: boolean,captcha :string) => void;\r\n};\r\nexport default compose<React.ComponentType>(WithClearProfileData, connect(mapStateToProps, { setLoginData }))(LoginContainer);\r\n","import React from 'react'\r\nimport { ContactsType } from '../../../commons/CommonsFileTypes/ProfileType'\r\nimport styles from './PersonData.module.css'\r\ntype PropsType ={\r\n    contacts:ContactsType\r\n}\r\nconst Contacts : React.FunctionComponent<PropsType>= ({contacts}) => {\r\n    return (\r\n        <div className={styles.contacts}>\r\n            {Object.keys(contacts).map(key => {\r\n                return (\r\n                    <div key ={key}>\r\n                        <b>{key} :</b> {contacts[key as keyof ContactsType]||`here can be your ${key} adress`}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Contacts\r\n","import React from 'react'\r\nimport { createField } from '../../../commons/CreateField'\r\nimport { Input, Textarea } from '../../../commons/Input'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport styles from './PersonData.module.css'\r\nimport { ProfileType } from '../../../commons/CommonsFileTypes/ProfileType'\r\n\r\ntype PropsType = {\r\n\r\n}\r\nconst PersonDataForm :React.FunctionComponent<InjectedFormProps<ProfileType>> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.error}>\r\n                {props.error}\r\n            </div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <b>FullName </b> {createField('fullName', '', [], Input,{},'')}\r\n                    <b>AboutMe </b> {createField('aboutMe', '', [], Textarea,{},'')}\r\n                    <b>Lookingfor a job </b> {createField('lookingForAJob', '', [], Input, { type: 'checkbox' },'')}\r\n                    <b>Lookingfor a job description :</b> {createField('lookingForAJobDescription', '', [], Textarea,{},'')}\r\n                    <b>Facebook</b> {createField('contacts.facebook', '', [], Input,{},'')}\r\n                    <b>Website</b> {createField('contacts.webSite', '', [], Input,{},'')}\r\n                    <b>Vk</b> {createField('contacts.vk', '', [], Input,{},'')}\r\n                    <b>Twitter</b> {createField('contacts.twitter', '', [], Input,{},'')}\r\n                    <b>Instagram</b> {createField('contacts.instagram', '', [], Input,{},'')}\r\n                    <b>Youtube</b> {createField('contacts.youtube', '', [], Input,{},'')}\r\n                    <b>Github</b> {createField('contacts.github', '', [], Input,{},'')}\r\n                    <b>Mainlink</b> {createField('contacts.mainLink', '', [], Input,{},'')}\r\n                    <button>Save</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfileType>({ form: 'personData' })(PersonDataForm)","import React from 'react'\r\nimport {  ProfileType } from '../../../commons/CommonsFileTypes/ProfileType'\r\nimport Contacts from './Contacts'\r\nimport styles from './PersonData.module.css'\r\nimport PersonDataForm from './PersonDataForm'\r\n\r\n\r\n\r\ntype PropsType ={\r\n    profile: ProfileType\r\n    setEditMode : (editMode: boolean) => void\r\n    editMode : boolean\r\n    updateUserData:(data: ProfileType) => void\r\n    showEditButtons:boolean\r\n}\r\n\r\nconst PersonData : React.FunctionComponent<PropsType> = ({ profile, setEditMode, editMode,updateUserData,showEditButtons }) => {\r\n\r\n    \r\n    const onSubmit = (value : ProfileType) =>{\r\n        updateUserData(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div className= {styles.form}>\r\n                    <PersonDataForm  initialValues = {profile} onSubmit= {onSubmit}/>\r\n                </div>\r\n                : <div className={styles.personData}>\r\n                    <div>\r\n                        <b>Full name :</b> {profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        <b>About me :</b> {profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        <b>Lookingfor a job :</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>Lookingfor a job description :</b> {profile.lookingForAJobDescription}\r\n                        </div>\r\n                    }\r\n                    <div>\r\n                        \r\n                        <b>Contacts : </b> <Contacts contacts={profile.contacts} />\r\n                    </div>\r\n                    {showEditButtons&&<button className={styles.button} onClick={() => setEditMode(true)}>Edit my data</button>}\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PersonData\r\n","import React, { useState, useEffect } from 'react'\r\nimport styles from './Profile.module.css'\r\n\r\ntype PropsType = {\r\n    status: string | undefined\r\n    setUserStatus: (status: string | string) => void\r\n    showEditButtons: boolean\r\n}\r\n\r\nexport const Status: React.FunctionComponent<PropsType> = ({ status, setUserStatus, showEditButtons }) => {\r\n    useEffect(() => { setStatus(status) }, [status])\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let updateStatus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setEditMode(false)\r\n        setUserStatus(e.target.value)\r\n    }\r\n\r\n    let [inputValue, setStatus] = useState(status)\r\n\r\n    let setStatusValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.target.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={showEditButtons ? styles.statusCursor : \"\"}>\r\n            {showEditButtons\r\n                ? <div>\r\n                    {editMode\r\n                        ? <div>\r\n                            <input onChange={(e) => setStatusValue(e)} autoFocus={true} onBlur={(e) => updateStatus(e)} value={inputValue} />\r\n                        </div>\r\n                        : <div onClick={() => setEditMode(true)}>\r\n                            <span>{status || '-----'}</span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                : <div>\r\n                    {status || 'I will write status after sometime...'}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Status","import React from 'react'\r\nimport styles from './Profile.module.css'\r\nimport userPhoto from '../../../images/userPhoto.jpg'\r\nimport { PhotosType } from '../../../redux/user-reducer'\r\ntype PropsType = {\r\n    photos:PhotosType\r\n    loadFile:(photos: File|null) => void\r\n    showEditButtons :boolean\r\n}\r\n\r\nconst UserImage:React.FunctionComponent<PropsType> = ({ photos, loadFile,showEditButtons }) => {\r\n    let loadImage = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            loadFile(e.target.files[0])\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <img src={photos.large||userPhoto}  className = {styles.img}/>\r\n            <div className={styles.imgButton}>\r\n                <input type=\"file\" onChange={(e) => { loadImage(e) }} id='hidden' />\r\n               { showEditButtons&&<label htmlFor=\"hidden\">Update image</label>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UserImage","import React from 'react'\r\nimport loader from '../../images/preLoader.gif'\r\nimport styles from './PreLoader.module.css'\r\n\r\n\r\n\r\nconst SmallPreLoader = () => {\r\n    return(\r\n        <div >\r\n<img src={loader} className = {styles.small}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SmallPreLoader","import React, { useEffect } from 'react'\r\nimport PersonData from './PersonData/PersonData'\r\nimport styles from './Profile.module.css'\r\nimport Status from './Status'\r\nimport UserImage from './UserImage'\r\nimport PreLoader from '../../commons/PreLoader'\r\nimport Aos from 'aos'\r\nimport 'aos/dist/aos.css'\r\nimport SmallPreLoader from '../../commons/SmallPreLoader'\r\nimport { ProfilePropsType } from './ProfileContainer'\r\n\r\n\r\n\r\n\r\nconst Profile:React.FunctionComponent<ProfilePropsType> = ({ profile, status, editMode, setEditMode, updateUserData, setUserStatus, loadFile,loadingInProgres,showEditButtons}) => {\r\n    useEffect(() => {\r\n        Aos.init({ duration: 1000 })\r\n    }, [])\r\n\r\n    if (profile) {\r\n        return (\r\n            <div data-aos=\"flip-left\"\r\n     data-aos-easing=\"ease-out-cubic\"\r\n     data-aos-duration=\"2000\"  className = {styles.profile}>\r\n                <div>\r\n                {loadingInProgres&& <SmallPreLoader/>}<UserImage photos={profile.photos} loadFile={loadFile} showEditButtons={showEditButtons}/>\r\n                </div>\r\n\r\n                <div className={styles.status}>\r\n                    <Status status={status} setUserStatus={setUserStatus} showEditButtons={showEditButtons}/>\r\n                </div>\r\n\r\n                <div >\r\n                    <PersonData profile={profile} editMode={editMode} setEditMode={setEditMode} updateUserData={updateUserData} showEditButtons={showEditButtons}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return <PreLoader />\r\n\r\n}\r\n\r\n\r\nexport default Profile","import { RootState } from \"../reduxStore\"\r\n\r\nexport const profileSelector = (state:RootState) => {\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const idSelector = (state:RootState) => {\r\n    return state.auth.id\r\n}\r\n\r\nexport const statusSelector = (state:RootState) => {\r\n    return state.profilePage.status\r\n}\r\n\r\nexport const editModeSelector = (state:RootState) => {\r\n    return state.profilePage.editMode\r\n}\r\n\r\nexport const loadingInProgresSelector = (state:RootState) => {\r\n    return state.profilePage.loadingInProgres\r\n}\r\n\r\nexport const showEditButtonsSelector = (state:RootState) => {\r\n    return state.profilePage.showEditButtons\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { getUserProfile, getUserStatus, actions, updateUserData, setUserStatus, loadFile} from '../../../redux/profile-reducer'\r\nimport { compose } from 'redux'\r\nimport { profileSelector, idSelector, statusSelector, editModeSelector, loadingInProgresSelector, showEditButtonsSelector } from '../../../redux/selectores/profile-selector'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { WithPaginatorVisibility } from '../../HOCS/Hocs'\r\nimport { RootState } from '../../../redux/reduxStore'\r\nimport { ProfileType } from \"../../commons/CommonsFileTypes/ProfileType\"\r\n\r\n\r\ntype Params = {\r\n    id : string\r\n}\r\nclass ProfileContainer extends React.Component<ProfilePropsType&RouteComponentProps<Params>>{\r\n\r\n    componentDidMount() {\r\n        this.props.setEditMode(false)\r\n        let id:number|null = +this.props.match.params.id || this.props.id\r\n      \r\n        if (!id) {\r\n            id = this.props.id\r\n        }\r\n\r\n        if (!id) {\r\n            this.props.history.push(\"/login\"); \r\n        }\r\n        if (id) {\r\n            this.props.getUserProfile(id)\r\n            this.props.getUserStatus(id)\r\n        }\r\n\r\n        id === this.props.id ? this.props.setShowEditButtonsMode(true) : this.props.setShowEditButtonsMode(false)\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps:ProfilePropsType&RouteComponentProps<Params>) {\r\n        if (prevProps.match.params.id != this.props.match.params.id) {\r\n            this.componentDidMount()\r\n        } else if (!this.props.id && !prevProps.match.params.id) {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} />\r\n        )\r\n    }\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    id: number | null\r\n    status: string | undefined\r\n    editMode: boolean\r\n    loadingInProgres: boolean\r\n    showEditButtons: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (id: number) => void\r\n    getUserStatus: (id: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    updateUserData: (data: ProfileType) => void\r\n    setUserStatus: (status: string) => void\r\n    loadFile: (photos: File|null) => void\r\n    setShowEditButtonsMode: (showEditButtons: boolean) => void\r\n}\r\nconst setEditMode = actions.setEditMode\r\nconst setShowEditButtonsMode =actions.setShowEditButtonsMode\r\nexport type ProfilePropsType = MapDispatchToPropsType&MapStateToPropsType\r\nlet mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n    return {\r\n        profile: profileSelector(state),\r\n        id: idSelector(state),\r\n        status: statusSelector(state),\r\n        editMode: editModeSelector(state),\r\n        loadingInProgres: loadingInProgresSelector(state),\r\n        showEditButtons: showEditButtonsSelector(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(WithPaginatorVisibility, withRouter, connect(mapStateToProps,\r\n    { getUserProfile, getUserStatus, setEditMode, updateUserData, setUserStatus, loadFile, setShowEditButtonsMode }))(ProfileContainer)","import React from 'react'\r\nimport ReactPlayer from 'react-player'\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            here will be  music\r\n            <ReactPlayer controls url=\"https://www.youtube.com/watch?v=7P6X3IWLECY\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst TodoForm = ({addTodos}) =>{\r\nlet [inputValue,setValue] = useState(\"\")\r\n\r\n\r\n    return(\r\n        <div>\r\n            <input type=\"text\" onChange = {(e)=>{setValue(e.target.value)}} value = {inputValue}/>\r\n            <button onClick = {()=>{addTodos(inputValue)}}>Add todo</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React from 'react'\r\n\r\nconst TodoList = ({todos}) =>{\r\n    debugger\r\n    return(\r\n        <div>\r\n            {todos.map(todo=>{return <div key = {todo.id}>{todo.title} <span><input type=\"checkbox\" /></span></div>\r\n            })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default TodoList","import React from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport TodoList from './TodoList'\r\nimport { useState } from 'react'\r\n\r\n\r\n\r\n\r\nconst Todo = () =>{\r\n    let [todos, setTodo] = useState([])\r\n\r\n\r\n    let addTodos = (inputValue)=>{\r\n        debugger\r\n        setTodo(todos.concat({complited : false, title : inputValue, id: Date.now()}))\r\n        console.log(todos)\r\n    }\r\n    return(\r\n        <div>\r\n            <TodoList todos = {todos}/>\r\n            <TodoForm addTodos= {addTodos}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Todo","import React, { useState, Suspense } from 'react';\nimport styles from './App.module.css'\nimport Header from './Components/Header/Header';\nimport Navbar from './Components/Navbar/Navbar';\nimport { Route } from 'react-router-dom';\nimport Dialogs from './Components/Content/Dialogs/Dialogs';\nimport LoginContainer from './Components/Content/Login/LoginContainer';\nimport ProfileContainer from './Components/Content/Profile/ProfileContainer';\nimport PreLoader from './Components/commons/PreLoader';\nimport Music from './Components/Music/Music';\nimport Todo from './Components/Content/todo/Todo';\n\n\nconst UsersContainer = React.lazy(() => import('./Components/Content/Users/UsersContainer'))\n\nfunction App() {\n  let [activNavbar, setNavbarStatus] = useState(false)\n  return (\n    <div className={styles.app}>\n      <div className={styles.burger} onClick={() => setNavbarStatus(!activNavbar)}>\n        {activNavbar\n          ? <span >X</span>\n          : <b ></b>\n        }\n      </div>\n      <div className={styles.header}>\n        <Header />\n      </div>\n      <div className={activNavbar ? styles.navbarActivate : styles.navbar} >\n        <Navbar />\n      </div>\n      <div className={styles.content}>\n        <div>\n          <Route  path='/profile/:id?' render={() => <ProfileContainer />} />\n        </div>\n        <div>\n          <Route path='/dialogs' render={() => <Dialogs />} />\n        </div>\n        <div>\n          <Suspense fallback = {<PreLoader/>}>\n            <Route path='/users' render={() => <UsersContainer />} />\n          </Suspense>\n        </div>\n        <div className={styles.login}>\n          <Route path='/login' render={() => <LoginContainer />} />\n        </div>\n        <div>\n          <Route path='/music' render={() => <Music />} />\n        </div>\n        <div>\n          <Route path='/setting' render={() => <Todo />} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport App from './App'\r\nimport { connect } from 'react-redux'\r\nimport { isInitialaized } from './redux/app-reducer'\r\nimport PreLoader from './Components/commons/PreLoader'\r\nimport { compose } from 'redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { RootState } from './redux/reduxStore'\r\n\r\nclass AppContainer extends React.Component<PropsType&RouteComponentProps>{\r\n    componentDidMount() {\r\n        this.props.isInitialaized()\r\n    }\r\n    render() {\r\n        if (!this.props.initialaiz) {\r\n            return <PreLoader />\r\n        }\r\n        return (\r\n            <App />\r\n        ) \r\n    }\r\n}\r\ntype MapStateToPropstype = {\r\ninitialaiz : boolean\r\n}\r\ntype MapDispatchToPropstype = {\r\n    isInitialaized : ()=>void\r\n}\r\nlet mapStateToProps = (state:RootState) => {\r\n    return {\r\n        initialaiz: state.app.initialaiz\r\n    }\r\n}\r\ntype PropsType= MapDispatchToPropstype&MapStateToPropstype\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, { isInitialaized }),withRouter)(AppContainer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport store from './redux/reduxStore'\nimport {Provider} from 'react-redux'\nimport AppContainer from './AppContainer';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store = {store}>\n        <AppContainer />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport loader from '../../images/preLoader.gif'\r\nimport styles from './PreLoader.module.css'\r\n\r\n\r\n\r\nconst PreLoader = () => {\r\n    return(\r\n        <div  className = {styles.preLoader}>\r\n<img src={loader} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PreLoader","import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { userActions} from '../../redux/user-reducer'\r\nimport { actions } from '../../redux/profile-reducer'\r\nimport { RootState } from '../../redux/reduxStore'\r\nimport { ProfileType } from \"../commons/CommonsFileTypes/ProfileType\"\r\n\r\nexport function withRedirectToLogin<WCP>(Component:React.ComponentType<WCP>){\r\n    let mapStateToProps = (state:RootState) => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    }\r\n    type MapStateType = {\r\n        isAuth :boolean\r\n    }\r\n    type MapDispatchType={}\r\n    let RedirectComponenet: React.FC<MapStateType&MapDispatchType> = (props) => {\r\n      let  {isAuth,...restProps}=props\r\n        if (!props.isAuth) return <Redirect to='/login' />\r\n        \r\n        return (\r\n            <Component {...restProps  as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<MapStateType,MapDispatchType,WCP,RootState>(mapStateToProps, {})(RedirectComponenet)\r\n}\r\n\r\n\r\n\r\nexport function WithPaginatorVisibility<WCP>(Component:React.FunctionComponent<WCP>){\r\n    const setShowLoader = userActions.setShowLoader\r\n    let mapStateToProps = () => {\r\n        return {\r\n            \r\n        }\r\n    }\r\n    type MapDispatchToPropsType={\r\n        setShowLoader: (showLoader : boolean)=>void\r\n    }\r\n    let PaginatorVisibility:React.FunctionComponent<MapDispatchToPropsType>= (props) => {\r\n      useEffect(()=>{props.setShowLoader(true)},[])  \r\n      let {setShowLoader,...restProps}=props\r\n        return (\r\n            <Component {...restProps as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<{},MapDispatchToPropsType,WCP,RootState>(mapStateToProps, {setShowLoader})(PaginatorVisibility)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function WithClearProfileData<WCP>(Component:React.FunctionComponent<WCP>){\r\n    const setProfile = actions.setProfile\r\n    let mapStateToProps = () => {\r\n        return {\r\n            \r\n        }\r\n    }\r\n    type MapDispatchToPropsType={\r\n        setProfile: (profile : ProfileType|null)=>void\r\n    }\r\n    let ClearProfile:React.FunctionComponent<MapDispatchToPropsType>= (props) => {\r\n        let {setProfile,...restProps}=props\r\n      useEffect(()=>{props.setProfile(null)},[])  \r\n        return (\r\n            <Component {...restProps as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<{},MapDispatchToPropsType,WCP,RootState>(mapStateToProps, {setProfile})(ClearProfile)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"personData\":\"PersonData_personData__3EqBe\",\"button\":\"PersonData_button__1wy9q\",\"form\":\"PersonData_form__2C7rL\",\"contacts\":\"PersonData_contacts__1sRkK\",\"error\":\"PersonData_error__Tjk5d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__24WIs\",\"status\":\"Profile_status__1RwrN\",\"statusCursor\":\"Profile_statusCursor__1BESj\",\"img\":\"Profile_img__dy8AF\",\"imgButton\":\"Profile_imgButton__1LS20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2XIlG\",\"navbar\":\"App_navbar__1IJ8h\",\"content\":\"App_content__3TDbZ\",\"header\":\"App_header__1EugV\",\"burger\":\"App_burger__1A9ZW\",\"login\":\"App_login__bBNZt\",\"navbarActivate\":\"App_navbarActivate__1cmxD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarItems\":\"Navbar_navbarItems__8ladr\",\"selectedItem\":\"Navbar_selectedItem__z5sqW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__2uudr\",\"inputError\":\"Input_inputError__2xkML\",\"inputStyle\":\"Input_inputStyle__2UbZS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__1khX0\",\"elements\":\"Header_elements__L9oqi\",\"logout\":\"Header_logout__3im22\",\"header\":\"Header_header__2JiWu\"};","import { AxiosResponse } from 'axios';\r\nimport { UserType } from '../redux/user-reducer';\r\nimport { instanse, MainResponseType } from './api';\r\n\r\ntype UserDataType = {\r\n    items : Array<UserType>\r\n    totalCount: number\r\n    error : Array<string>\r\n}\r\nexport const userApi = {\r\n    getUsersData(count: number, page: number,term:string='',friend : boolean|null) {\r\n        return instanse.get(`users?count=${count}&page=${page}&term=${term}&friend=${friend}`)\r\n            .then((response:AxiosResponse<UserDataType>) => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n        return instanse.post(`follow/${userId}`)\r\n            .then((response: AxiosResponse<MainResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    unFollow(userId: number) {\r\n        return instanse.delete(`follow/${userId}`)\r\n            .then((response: AxiosResponse<MainResponseType>) => {\r\n                return response.data;\r\n            });\r\n    }\r\n};\r\n","import { ThunkAction } from \"redux-thunk\"\r\nimport { ResultCodeType } from \"../API/api\"\r\nimport { userApi } from \"../API/userApi\"\r\nimport { followUnfollowFlow } from \"../Components/commons/followUnfollowFlow\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\n\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_PORCE_NUMBER = 'SET_PORCE_NUMBER'\r\nconst SET_FOLLOW_UNFOLLOW_USER = 'SET_FOLLOW_UNFOLLOW_USER'\r\nconst FOLLOW_IN_PROGRES = 'FOLLOW_IN_PROGRES'\r\nconst SHOW_LOADER = 'SHOW_LOADER'\r\nconst SET_FILTER_VIZIBILITY = 'SET_FILTER_VIZIBYLITY'\r\nconst SET_FILTER = 'SET_FILTER'\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nconst initialState= {\r\n    filter :{\r\n        term: \"\",\r\n        friend : null as null|boolean\r\n    },\r\n    totalCount: 0,\r\n    pageSize: 100,\r\n    porcionSize: 10,\r\n    porceNumber: 1,\r\n    currentPage: 1,\r\n    users: [] as Array<UserType>,\r\n    followInProgres: [] as Array<number>,\r\n    showLoader: false,\r\n    filterVizibility:true\r\n}\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype FilterType = {\r\n    term :string\r\n    friend: null|boolean\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst UserReducer = (state = initialState, action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users \r\n            }\r\n            case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n                case 'SET_FILTER_VIZIBYLITY':\r\n                return {\r\n                    ...state,\r\n                    filterVizibility: action.filterVizibility\r\n                } \r\n        case 'SET_TOTAL_COUNT':\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SET_PORCE_NUMBER':\r\n            return {\r\n                ...state,\r\n                porceNumber: action.porceNumber\r\n            }\r\n        case 'SET_FOLLOW_UNFOLLOW_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: action.follow } \r\n                    }\r\n                    return u \r\n\r\n                })\r\n            }\r\n        case 'FOLLOW_IN_PROGRES':\r\n            return {\r\n                ...state,\r\n                followInProgres: action.isFetching\r\n                    ? [...state.followInProgres, action.id]\r\n                    : state.followInProgres.filter(id => id != action.id) \r\n            } \r\n        case 'SHOW_LOADER':\r\n            return {\r\n                ...state,\r\n                showLoader: action.showLoader\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const userActions={\r\n    setUsers : (users: Array<UserType>) => ({ type: SET_USERS, users }as const), \r\n    setFilter : ({term,friend}:FilterType) => ({ type: SET_FILTER,payload: {term,friend} }as const), \r\n    setUsersFilter : (users: Array<UserType>) => ({ type: SET_USERS, users }as const), \r\n    setTotalCount : (totalCount: number) => ({ type: SET_TOTAL_COUNT, totalCount }as const),\r\n    setCurrentPage : (currentPage: number) => ({ type: SET_CURRENT_PAGE, currentPage }as const),\r\n    setPorceNumber : (porceNumber: number) => ({ type: SET_PORCE_NUMBER, porceNumber }as const),\r\n    setFollowUnfollowUser : (follow:boolean,id: number) => ({ type: SET_FOLLOW_UNFOLLOW_USER, id,follow }as const),\r\n    setFolowInProgres : (isFetching: boolean, id: number) => ({ type: FOLLOW_IN_PROGRES, isFetching, id }as const),\r\n    setShowLoader : (showLoader: boolean) => ({ type: SHOW_LOADER, showLoader }as const),\r\n    setFilterVizibility : (filterVizibility: boolean) => ({ type: SET_FILTER_VIZIBILITY, filterVizibility }as const)\r\n}\r\n\r\n\r\ntype ActionsType = InferActionsType<typeof userActions>\r\n\r\nexport const getUsers = (pageSize: number, currentPage: number,term: string,friend:boolean|null): ThunkAction<void, RootState, unknown, ActionsType> => (dispatch) => {\r\n    dispatch(userActions.setShowLoader(true))\r\n    dispatch(userActions.setFilter({term,friend}))\r\n    userApi.getUsersData(pageSize, currentPage,term,friend)\r\n        .then(data => {\r\n            dispatch(userActions.setUsers(data.items))\r\n            dispatch(userActions.setTotalCount(data.totalCount))\r\n            dispatch(userActions.setCurrentPage(currentPage))\r\n            dispatch(userActions.setShowLoader(false))\r\n        })\r\n}\r\n\r\nexport const getCurrentPage = (pageSize: number, currentPage: number, porceNumber: number,term: string,friend:boolean|null): ThunkAction<void, RootState, unknown, ActionsType> => (dispatch) => {\r\n    dispatch(userActions.setShowLoader(true))\r\n    userApi.getUsersData(pageSize, currentPage,term,friend)\r\n        .then(data => {\r\n            dispatch(userActions.setUsers(data.items))\r\n            dispatch(userActions.setCurrentPage(currentPage))\r\n            dispatch(userActions.setPorceNumber(porceNumber))\r\n            dispatch(userActions.setShowLoader(false))\r\n        })\r\n}\r\nexport const followUnfollowUser = (follow: boolean,id: number): ThunkAction<void, RootState, unknown, ActionsType> => (dispatch) => {\r\n    dispatch(userActions.setFolowInProgres(true, id))\r\n    followUnfollowFlow(follow,id)\r\n        .then(data => {\r\n            if (data.resultCode === ResultCodeType.Success) {\r\n                dispatch(userActions.setFollowUnfollowUser(follow,id))\r\n                dispatch(userActions.setFolowInProgres(false, id))\r\n            }\r\n        })\r\n}\r\n\r\nexport default UserReducer\r\n\r\n\r\n","import { userApi } from \"../../API/userApi\";\r\n\r\nexport function followUnfollowFlow(follow: boolean, id: number) {\r\n    if (follow) {\r\n        return userApi.follow(id);\r\n    }\r\n    return userApi.unFollow(id);\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/preLoader.2b02159f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"small\":\"PreLoader_small__QvNCa\",\"preLoader\":\"PreLoader_preLoader__NY5D7\"};","import axios from 'axios'\r\nimport { PhotosType } from '../redux/user-reducer'\r\n\r\nexport let instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"6656f04f-8cb6-4cab-a1f6-1a937fec17c4\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodeType{\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRecuired=10\r\n}\r\nexport type MainResponseType<D={}> = {\r\n    resultCode: ResultCodeType\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\n\r\n\r\nexport type SetStatusTextResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\nexport type SetUserDataResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\nexport type SetImageResponseType = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}