{"version":3,"sources":["API/api.ts","images/userPhoto.jpg","Components/commons/Input.tsx","Components/commons/CreateField.tsx","API/dialogsApi.ts","redux/dialogs-reducer.ts","images/logo.png","API/profileApi.ts","redux/profile-reducer.ts","Components/Content/Login/Login.module.css","Components/commons/PreLoader.tsx","serviceWorker.js","API/loginApi.ts","redux/auth-reducer.tsx","redux/app-reducer.ts","redux/reduxStore.ts","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/commons/validators.ts","Components/Content/Login/LoginForm.tsx","Components/Content/Login/Login.tsx","Components/Content/Login/LoginContainer.tsx","Components/Content/Profile/PersonData/Contacts.tsx","Components/Content/Profile/PersonData/PersonDataForm.tsx","Components/Content/Profile/PersonData/PersonData.tsx","Components/Content/Profile/Status.tsx","Components/Content/Profile/UserImage.tsx","Components/commons/SmallPreLoader.tsx","Components/Content/Profile/Profile.tsx","redux/selectores/profile-selector.ts","Components/Content/Profile/ProfileContainer.tsx","Components/Music/Music.jsx","App.tsx","AppContainer.tsx","index.tsx","Components/Content/Profile/PersonData/PersonData.module.css","Components/Content/Profile/Profile.module.css","App.module.css","Components/Navbar/Navbar.module.css","Components/commons/Input.module.css","Components/Header/Header.module.css","API/userApi.ts","Components/commons/followUnfollowFlow.ts","redux/user-reducer.ts","Components/HOCS/Hocs.tsx","images/preLoader.gif","Components/commons/PreLoader.module.css"],"names":["ResultCodeType","instanse","axios","create","withCredentials","baseURL","headers","module","exports","UniInput","meta","restProps","input","hasError","error","touched","className","styles","inputError","children","Input","props","inputStyle","Textarea","createField","name","placholder","validators","component","text","placeholder","validate","ws","subscribers","handlerClose","removeEventListener","messageEvent","close","console","log","setTimeout","creatChannel","forEach","s","e","messages","JSON","parse","data","WebSocket","addEventListener","dialogsApi","action","dispatch","event","push","messageChatCallbackCreator","statusTypeCalbackCreator","message","send","initialState","chatUsers","status","dialogsActions","type","_messageChatCallback","_statusTypeCallback","subscribeActions","creatChat","a","deleteChat","sendMessage","DialogsReducer","state","map","u","id","v1","filter","index","array","length","profileApi","userId","get","then","response","put","file","photo","FormData","append","profile","undefined","editMode","loadingInProgres","showEditButtons","actions","setProfile","setStatus","setPhotos","photos","setLoadingInProgres","setShowEditButtonsMode","setEditMode","getUserProfile","getUserStatus","updateUserData","getState","auth","resultCode","stopSubmit","_error","setUserStatus","loadFile","profileReducer","PreLoader","preLoader","src","loader","Boolean","window","location","hostname","match","loginApi","email","password","rememberMe","captcha","post","delete","login","captchaSrc","isAuth","loading","authActions","getAuthData","Success","authReducer","initialaiz","appActions","AppReducer","reducers","combineReducers","form","formReducer","profilePage","usersPage","UserReducer","app","dialogs","store","createStore","applyMiddleware","thunkMiddleware","__store__","connect","logoutProfile","header","elements","logo","logout","onClick","Navbar","navbarItems","to","activeClassName","selectedItem","required","value","maxLength","maxLengthCreator","LoginReduxForm","reduxForm","handleSubmit","loginForm","onSubmit","field","checkbox","button","Login","useEffect","Aos","init","duration","data-aos","setLoginData","compose","WithClearProfileData","promis","Promise","all","CaptchaIsRecuired","url","Contacts","contacts","Object","keys","key","PersonData","initialValues","personData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Status","useState","inputValue","statusCursor","onChange","target","setStatusValue","autoFocus","onBlur","updateStatus","UserImage","large","userPhoto","img","imgButton","files","loadImage","htmlFor","SmallPreLoader","small","Profile","data-aos-easing","data-aos-duration","profileSelector","idSelector","statusSelector","editModeSelector","loadingInProgresSelector","showEditButtonsSelector","ProfileContainer","this","params","history","prevProps","componentDidMount","React","Component","WithPaginatorVisibility","withRouter","Music","controls","UsersContainer","lazy","DialogsContainer","App","activNavbar","setNavbarStatus","burger","exact","path","render","navbarActivate","navbar","content","fallback","AppContainer","isInitialaized","promise","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","userApi","count","page","term","friend","followUnfollowFlow","follow","totalCount","pageSize","porcionSize","porceNumber","currentPage","users","followInProgres","showLoader","filterVizibility","userActions","setUsers","setFilter","payload","setUsersFilter","setTotalCount","setCurrentPage","setPorceNumber","setFollowUnfollowUser","setFolowInProgres","isFetching","setShowLoader","setFilterVizibility","getUsers","items","getCurrentPage","followUnfollowUser","followed","withRedirectToLogin"],"mappings":"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","file":"static/js/main.3911e2d7.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { PhotosType } from '../redux/user-reducer'\r\n\r\nexport let instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"6656f04f-8cb6-4cab-a1f6-1a937fec17c4\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodeType{\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRecuired=10\r\n}\r\nexport type MainResponseType<D={}> = {\r\n    resultCode: ResultCodeType\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\n\r\n\r\nexport type SetStatusTextResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\nexport type SetUserDataResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\nexport type SetImageResponseType = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n}\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/userPhoto.e1529f18.jpg\";","import React from 'react'\r\nimport { WrappedFieldProps } from 'redux-form'\r\nimport styles from './Input.module.css'\r\n\r\n\r\n// export let Input = ({meta,input, ...restProps}) => {\r\n//     let hasError = meta.error&&meta.touched\r\n\r\n//     debugger\r\n//     return (\r\n//         <div className={hasError&&styles.inputError}>\r\n//             <div >\r\n//                 <input {...input} {...restProps}  className= {hasError?styles.error:\"\" +\"\"+ styles.inputStyle}/>\r\n//             </div>\r\n// {hasError&&meta.error}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport type OwnPropsType = {\r\n    \r\n};\r\nconst UniInput:React.FunctionComponent<WrappedFieldProps&OwnPropsType> = ({ meta, input, ...restProps }) => {\r\n    let hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={hasError?styles.inputError:\"\"}>\r\n            <div >\r\n                {restProps.children}\r\n            </div>\r\n            {hasError && meta.error}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport let Input:React.FunctionComponent<WrappedFieldProps&OwnPropsType> = (props) => {\r\n    const { meta, input, ...restProps } = props\r\n    let hasError = meta.error && meta.touched\r\n    return (\r\n        <div>\r\n            <UniInput {...props}><input {...input} {...restProps} className= {hasError?styles.error:\"\" +\"\"+ styles.inputStyle} /></UniInput>\r\n        </div>\r\n    )\r\n}\r\nexport let Textarea:React.FunctionComponent<WrappedFieldProps&OwnPropsType> = (props) => {\r\n    const { meta, input, ...restProps } = props\r\n    let hasError = meta.error && meta.touched\r\n    return (\r\n        <div>\r\n            <UniInput {...props}><textarea {...input} {...restProps} className= {hasError?styles.error:\"\" +\"\"+ styles.inputStyle}/></UniInput>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { ValidatorsType } from './validators'\r\n\r\n\r\nexport function createField<FormName extends string,OwnProps={}>(\r\n    name: FormName,\r\n    placholder: string | undefined,\r\n    validators: Array<ValidatorsType>,\r\n    component: React.FC<WrappedFieldProps&OwnProps>,\r\n    props: {},\r\n    text: string){\r\n\r\n    return (\r\n        <div>\r\n            <Field name={name} placeholder={placholder} validate={validators} component={component} {...props} />{text}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { chatUsersType, subscribeActions } from \"../redux/dialogs-reducer\"\r\nimport { InferActionsType } from \"../redux/reduxStore\"\r\n\r\nexport type chatUsersApiType = {\r\n    userId: number\r\n    photo: string\r\n    message: string\r\n    userName: string\r\n}\r\nexport type StatusType = \"panding\" | \"raddy\"\r\n\r\n\r\ntype StatusChangeLisnerType = (status: StatusType) => void\r\n\r\nlet ws: WebSocket | null = null\r\ntype SubscriberType = (message: chatUsersType[]) => void\r\nlet subscriber: SubscriberType\r\nlet subscribers = {\r\n    'messageEvent': [] as SubscriberType[],\r\n    'statusEvent': [] as StatusChangeLisnerType[]\r\n}\r\n\r\ntype EventType = 'messageEvant' | 'statusEvent'\r\n\r\nconst handlerClose = () => {\r\n    ws?.removeEventListener('message', messageEvent)\r\n    ws?.removeEventListener('close', handlerClose)\r\n    ws?.close()\r\n    console.log('kkkk')\r\n    setTimeout(creatChannel, 2000)\r\n    // subscribers['messageEvent'].forEach(s => s([]))\r\n    subscribers['statusEvent'].forEach(s => s('panding'))\r\n}\r\nconst messageEvent = (e: MessageEvent) => {\r\n    let messages = JSON.parse(e.data)\r\n    subscribers['messageEvent'].forEach(s => s(messages))\r\n\r\n}\r\nfunction creatChannel() {\r\n    ws?.removeEventListener('message', messageEvent)\r\n    ws?.removeEventListener('close', handlerClose)\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    ws.addEventListener('close', handlerClose)\r\n    ws.addEventListener('message', messageEvent)\r\n    ws&&subscribers['statusEvent'].forEach(s => s('raddy'))\r\n}\r\nexport type SubscribeActionType =\r\n    InferActionsType<typeof subscribeActions>\r\n\r\nexport const dialogsApi = {\r\n    start() {\r\n        creatChannel()\r\n    },\r\n    stop() {\r\n        ws?.removeEventListener('close', handlerClose)\r\n        ws?.removeEventListener('message', messageEvent)\r\n        ws?.close()\r\n        ws = null\r\n    },\r\n   \r\n    subscribe(action:SubscribeActionType,dispatch:Dispatch) {\r\n        switch (action.event) {\r\n            case \"messageEvant\":\r\n                {\r\n                  subscribers['messageEvent'].push(action.messageChatCallbackCreator(dispatch))\r\n                }\r\n               break\r\n                case \"statusEvent\" :\r\n                    {\r\n                        subscribers['statusEvent'].push(action.statusTypeCalbackCreator(dispatch))\r\n                    }\r\n                    break\r\n        }\r\n    },\r\n    unSubscribe(action:SubscribeActionType,dispatch:Dispatch) {\r\n        ws?.removeEventListener('message', messageEvent)\r\n        ws?.removeEventListener('close', handlerClose)\r\n        ws?.close()\r\n        switch (action.event) {\r\n            case \"messageEvant\":\r\n                {\r\n                    subscribers['messageEvent']=  subscribers['messageEvent'].filter(s=>s!==action.messageChatCallbackCreator(dispatch))\r\n                }\r\n                break\r\n                case \"statusEvent\" :\r\n                    {\r\n                        subscribers['statusEvent']= subscribers['statusEvent'].filter(s=>s!==action.statusTypeCalbackCreator(dispatch))\r\n                    }\r\n                    break\r\n        }\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    },\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { v1 } from \"uuid\"\r\nimport { chatUsersApiType, dialogsApi, StatusType } from \"../API/dialogsApi\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\n\r\nconst SET_CHAT_USERS = 'SET_CHAT_USERS'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\n\r\nexport type chatUsersType = chatUsersApiType & { id: string }\r\n\r\ntype InitialStateType = {\r\n    chatUsers: Array<chatUsersType>\r\n    status: StatusType\r\n}\r\nconst initialState: InitialStateType = {\r\n    chatUsers: [],\r\n    status: 'panding'\r\n}\r\n\r\n\r\nconst DialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_CHAT_USERS\":\r\n            return {\r\n                ...state,\r\n                chatUsers: [...state.chatUsers, ...action.chatUsers.map(u => ({ ...u, id: v1() }))].filter((u,index,array)=>index>(array.length-101))\r\n            }\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default: return state\r\n    }\r\n}\r\ntype ActionsType = InferActionsType<typeof dialogsActions>\r\nexport const dialogsActions = {\r\n    setChatUsers: (chatUsers: chatUsersApiType[]) => ({ type: SET_CHAT_USERS, chatUsers } as const),\r\n    setStatus: (status: StatusType) => ({ type: SET_STATUS, status } as const)\r\n}\r\n\r\nlet _messageChatCallback: ((chatUsers: chatUsersApiType[]) => void) | null = null\r\nlet _statusTypeCallback: ((status: StatusType) => void) | null = null\r\n\r\nconst statusTypeCalbackCreator = (dispatch: Dispatch) => {\r\n    if (_statusTypeCallback === null) {\r\n        return _statusTypeCallback = (status: StatusType) => {\r\n            dispatch(dialogsActions.setStatus(status))\r\n        }\r\n    }\r\n    return _statusTypeCallback\r\n}\r\nconst messageChatCallbackCreator = (dispatch: Dispatch) => {\r\n    if (_messageChatCallback === null) {\r\n        return _messageChatCallback = (messages: chatUsersApiType[]) => {\r\n            dispatch(dialogsActions.setChatUsers(messages))\r\n        }\r\n    }\r\n    return _messageChatCallback\r\n}\r\nexport const subscribeActions ={\r\n    messageEvant:() => ({event:'messageEvant', messageChatCallbackCreator} as const),\r\n    statusEvent:() => ({event:'statusEvent',statusTypeCalbackCreator} as const)\r\n}\r\nexport const creatChat = (): ThunkAction<void, RootState, unknown, ActionsType> => async (dispatch) => {\r\n    dialogsApi.subscribe(subscribeActions.messageEvant(),dispatch)\r\n    dialogsApi.subscribe(subscribeActions.statusEvent(),dispatch)\r\n    dialogsApi.start()\r\n}\r\nexport const deleteChat = (): ThunkAction<void, RootState, unknown, ActionsType> => async (dispatch) => {\r\n    dialogsApi.subscribe(subscribeActions.messageEvant(),dispatch)\r\n    dialogsApi.subscribe(subscribeActions.statusEvent(),dispatch)\r\n    // dialogsApi.unSubscribe(subscribeActions.messageEvant(),dispatch)\r\n    // dialogsApi.unSubscribe(subscribeActions.statusEvent(),dispatch)\r\n    dispatch(dialogsActions.setChatUsers([]))\r\n}\r\nexport const sendMessage = (message: string) => {\r\n    dialogsApi.sendMessage(message)\r\n\r\n}\r\n\r\n\r\nexport default DialogsReducer","module.exports = __webpack_public_path__ + \"static/media/logo.cd9a1ab4.png\";","import { AxiosResponse } from 'axios';\r\nimport { instanse, SetStatusTextResponseType, SetUserDataResponseType, SetImageResponseType } from './api';\r\nimport { ProfileType } from \"../Components/commons/CommonsFileTypes/ProfileType\";\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number | null) {\r\n        return instanse.get(`profile/` + userId)\r\n            .then((response: AxiosResponse<ProfileType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getStatus(userId: number) {\r\n        return instanse.get(`profile/status/` + userId)\r\n            .then((response: AxiosResponse<string>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    setStatusText(status: string) {\r\n        return instanse.put(`profile/status/`, { status })\r\n            .then((response: AxiosResponse<SetStatusTextResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    setUserData(data: ProfileType) {\r\n        return instanse.put(`profile/`, data)\r\n            .then((response: AxiosResponse<SetUserDataResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    setImage(file: File) {\r\n        const photo = new FormData();\r\n        photo.append('image', file);\r\n        return instanse.put(`profile/photo/`, photo, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then((response: AxiosResponse<SetImageResponseType>) => {\r\n                return response.data;\r\n            });\r\n    }\r\n};\r\n\r\n\r\n","import { ProfileType } from \"../Components/commons/CommonsFileTypes/ProfileType\"\r\nimport { profileApi } from \"../API/profileApi\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { PhotosType } from \"./user-reducer\"\r\nimport { RootState, InferActionsType } from \"./reduxStore\"\r\n\r\n\r\n\r\nconst SET_PROFILE = 'SET_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst SET_EDIT_MODE = 'SET_EDIT_MODE'\r\nconst SET_PHOTOS = 'SET_PHOTOS'\r\nconst SET_LOADING_IN_PROGRES = 'SET_LOADING_IN_PROGRES'\r\nconst SET_SHOW_EDIT_BUTTONS_MODE = 'SET_SHOW_EDIT_BUTTONS_MODE'\r\n\r\n\r\nexport type InitialStateType = {\r\n    profile: ProfileType | null\r\n    status: string | undefined\r\n    editMode: boolean\r\n    loadingInProgres: boolean\r\n    showEditButtons: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    profile: null,\r\n    status: undefined,\r\n    editMode: false,\r\n    loadingInProgres: false,\r\n    showEditButtons: false\r\n}\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'SET_EDIT_MODE':\r\n            return {\r\n                ...state,\r\n                editMode: action.editMode\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.photos } as ProfileType\r\n            }\r\n        case 'SET_LOADING_IN_PROGRES':\r\n            return {\r\n                ...state,\r\n                loadingInProgres: action.loadingInProgres\r\n            }\r\n        case 'SET_SHOW_EDIT_BUTTONS_MODE':\r\n            return {\r\n                ...state,\r\n                showEditButtons: action.showEditButtons\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType | null) => ({ type: SET_PROFILE, profile } as const),\r\n    setStatus: (status: string) => ({ type: SET_STATUS, status } as const),\r\n    setPhotos: (photos: PhotosType) => ({ type: SET_PHOTOS, photos } as const),\r\n    setLoadingInProgres: (loadingInProgres: boolean) => ({ type: SET_LOADING_IN_PROGRES, loadingInProgres } as const),\r\n    setShowEditButtonsMode: (showEditButtons: boolean) => ({ type: SET_SHOW_EDIT_BUTTONS_MODE, showEditButtons } as const),\r\n    setEditMode: (editMode: boolean) => ({ type: SET_EDIT_MODE, editMode } as const)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const getUserProfile = (id: number | null): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let data = await profileApi.getProfile(id)\r\n    dispatch(actions.setProfile(data))\r\n    dispatch(actions.setLoadingInProgres(false))\r\n}\r\n\r\n\r\nexport const getUserStatus = (id: number): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    let data = await profileApi.getStatus(id)\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateUserData = (data: ProfileType): ThunkAction<void, RootState, unknown, ActionTypes | FormAction> => async (dispatch, getState) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let id = getState().auth.id\r\n    let response = await profileApi.setUserData(data)\r\n    if (response.resultCode === 0) {\r\n        if (id != null) {\r\n            dispatch(getUserProfile(id))\r\n        }\r\n\r\n        dispatch(actions.setEditMode(false))\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    } else {\r\n        let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"personData\", { _error: message }));\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    }\r\n}\r\n\r\n\r\nexport const setUserStatus = (status: string): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let data = await profileApi.setStatusText(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    }\r\n}\r\n\r\nexport const loadFile = (file: File): ThunkAction<void, RootState, unknown, ActionTypes> => async (dispatch) => {\r\n    dispatch(actions.setLoadingInProgres(true))\r\n    let data = await profileApi.setImage(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setPhotos(data.data.photos))\r\n        dispatch(actions.setLoadingInProgres(false))\r\n    }\r\n}\r\n\r\nexport default profileReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__3y6jX\",\"button\":\"Login_button__ZmrCK\",\"checkbox\":\"Login_checkbox__2nbn-\",\"field\":\"Login_field__2tdrt\",\"loginForm\":\"Login_loginForm__2VNKq\",\"error\":\"Login_error__LEvqZ\"};","import React from 'react'\r\nimport loader from '../../images/preLoader.gif'\r\nimport styles from './PreLoader.module.css'\r\n\r\n\r\n\r\nconst PreLoader = () => {\r\n    return(\r\n        <div  className = {styles.preLoader}>\r\n<img src={loader} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PreLoader","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AxiosResponse } from 'axios';\r\nimport { instanse, MainResponseType } from './api';\r\n\r\n\r\n\r\n\r\n\r\ntype AuthorizedDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype IsAuthorizedType = MainResponseType<AuthorizedDataType>\r\n\r\n\r\ntype LoginDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = MainResponseType<LoginDataType>\r\n\r\n\r\n\r\ntype CaptchaType = {\r\n    url: string\r\n}\r\n\r\n\r\nexport const loginApi = {\r\n    login({ email, password, rememberMe = false, captcha }: { email: string, password: string, rememberMe: boolean, captcha: string }) {\r\n        let data = { email, password, rememberMe, captcha };\r\n        return instanse.post(`auth/login/`, data)\r\n            .then((response: AxiosResponse<LoginResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    logout() {\r\n        return instanse.delete(`auth/login`)\r\n            .then((response: AxiosResponse<MainResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    isAuthorized() {\r\n        return instanse.get(`auth/me`)\r\n            .then((response: AxiosResponse<IsAuthorizedType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getCaptcha() {\r\n        return instanse.get('/security/get-captcha-url')\r\n            .then((response: AxiosResponse<CaptchaType>) => {\r\n                return response.data\r\n            })\r\n    }\r\n};\r\n","import { loginApi } from \"../API/loginApi\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\nimport { ResultCodeType } from \"../API/api\"\r\n\r\nconst SET_AUTH_DATA = \"SET_AUTH_DATA\"\r\nconst SET_LOADING = \"SET_LOADING\"\r\n\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    login: null as null | string,\r\n    email: null as null | string,\r\n    captchaSrc: null as null | string,\r\n    isAuth: false,\r\n    loading: false\r\n}\r\nexport type AuthInitialStateType = typeof initialState\r\nconst authReducer = (state = initialState, action: AuthActionTypes): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_AUTH_DATA\":\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                login: action.login,\r\n                email: action.email,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        case 'SET_CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captchaSrc: action.captchaSrc\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nconst authActions = {\r\n    setAuthData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({ type: SET_AUTH_DATA, id, login, email, isAuth, } as const),\r\n    setLoading: (loading: boolean) => ({ type: SET_LOADING, loading } as const),\r\n    setCaptcha: (captchaSrc: string | null) => ({ type: 'SET_CAPTCHA', captchaSrc } as const)\r\n}\r\n\r\n\r\nexport type AuthActionTypes = InferActionsType<typeof authActions>\r\n\r\nexport let setLoginData = (email: string, password: string, rememberMe: boolean, captcha: string):\r\n    ThunkAction<void, RootState, unknown, AuthActionTypes | FormAction> => {\r\n    return (dispatch) => {\r\n        dispatch(authActions.setLoading(true))\r\n        loginApi.login({ email, password, rememberMe, captcha })\r\n            .then(data => {\r\n                if (data.resultCode === ResultCodeType.Success) {\r\n                    let promis = dispatch(getAuthData())\r\n                    Promise.all([promis])\r\n                        .then(() => {\r\n                            dispatch(authActions.setLoading(false))\r\n                            dispatch(authActions.setCaptcha(null))\r\n                        })\r\n                }\r\n                else if (data.resultCode = ResultCodeType.CaptchaIsRecuired) {\r\n                    loginApi.getCaptcha()\r\n                        .then(data => {\r\n                            debugger\r\n                            dispatch(authActions.setCaptcha(data.url))\r\n                            dispatch(authActions.setLoading(false))\r\n                        })\r\n                }\r\n                else {\r\n                    dispatch(authActions.setLoading(false))\r\n                    let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n                    dispatch(stopSubmit(\"login\", { _error: message }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport let getAuthData = (): ThunkAction<void, RootState, unknown, AuthActionTypes> => async (dispatch) => {\r\n    let data = await loginApi.isAuthorized()\r\n    if (data.resultCode === ResultCodeType.Success) {\r\n        dispatch(authActions.setAuthData(data.data.id, data.data.login, data.data.email, true))\r\n        dispatch(authActions.setLoading(false))\r\n    }\r\n}\r\nexport let logoutProfile = (): ThunkAction<void, RootState, unknown, AuthActionTypes> => (dispatch) => {\r\n    loginApi.logout()\r\n        .then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(authActions.setAuthData(null, null, null, false))\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport default authReducer","import { ThunkAction } from \"redux-thunk\"\r\nimport { getAuthData} from \"./auth-reducer\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\n\r\n\r\nconst SET_INITIALAIZ = \"SET_INITIALAIZ\"\r\n\r\ntype InitialStateType = {\r\n    initialaiz : boolean\r\n}\r\nconst initialState = {\r\n    initialaiz: false\r\n}\r\n\r\n\r\nconst AppReducer = (state = initialState, action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INITIALAIZ':\r\n            return {\r\n                ...state,\r\n                initialaiz: action.initialaiz\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst appActions= {\r\n    setInitialaiz : (initialaiz : boolean)=> ({ type: SET_INITIALAIZ, initialaiz }as const)\r\n}\r\n\r\ntype ActionsType = InferActionsType<typeof appActions>\r\nexport const isInitialaized = ()  :ThunkAction<void,RootState,unknown,ActionsType>=>async (dispatch) => {\r\n let  promise= await  dispatch(getAuthData())\r\n Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(appActions.setInitialaiz(true))\r\n        })\r\n}\r\n\r\nexport default AppReducer","import authReducer from \"./auth-reducer\"\r\nimport { createStore, applyMiddleware } from \"redux\"\r\nimport { combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\"\r\nimport UserReducer from \"./user-reducer\"\r\nimport AppReducer from \"./app-reducer\"\r\nimport DialogsReducer from \"./dialogs-reducer\"\r\n\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: UserReducer,\r\n    app: AppReducer,\r\n    dialogs: DialogsReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n\r\ntype ProprtisType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<ProprtisType<T>>\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store","import React from 'react'\r\nimport  styles from './Header.module.css' \r\nimport logo from '../../images/logo.png'\r\nimport { connect } from 'react-redux'\r\nimport {logoutProfile} from '../../redux/auth-reducer'\r\nimport { RootState } from '../../redux/reduxStore'\r\n\r\n\r\ntype PropsType = {\r\n    isAuth : boolean\r\n    logoutProfile: ()=>void\r\n}\r\nconst Header :React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <div className={styles.elements}>\r\n                <img src={logo} className={styles.logo} />\r\n                {props.isAuth&&<div className={styles.logout} onClick = {props.logoutProfile}>Logout</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype MapStateToPropsType ={\r\n    isAuth : boolean\r\n}\r\ntype MapDispatchToPropsType ={\r\n    logoutProfile :()=>void\r\n}\r\nlet mapStateToProps = (state:RootState):MapStateToPropsType=>{\r\n    return{\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\nexport default  connect<MapStateToPropsType, MapDispatchToPropsType, {},RootState>(mapStateToProps,{logoutProfile})(Header) ","import React from 'react'\r\nimport styles from './Navbar.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = ()=>{\r\n    return (\r\n        <div className = {styles.navbarItems}>\r\n            <div ><NavLink to ='/profile' activeClassName={styles.selectedItem}>Profile</NavLink></div>\r\n            <div><NavLink to ='/dialogs' activeClassName={styles.selectedItem}>Dialogs</NavLink></div>\r\n            <div><NavLink to ='/users' activeClassName={styles.selectedItem}>Users</NavLink></div>\r\n            <div><NavLink to ='/music' activeClassName={styles.selectedItem}>Music</NavLink></div>\r\n            <div><NavLink to ='/setting' activeClassName={styles.selectedItem}>Setting</NavLink></div>\r\n          \r\n          \r\n        \r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Navbar","\r\ntype MaxLengthType = (maxLength: number) => (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator:MaxLengthType = (maxLength)=> (value)=> {\r\n    if(value&&value.length>maxLength){\r\n        return ` max length ${maxLength} simbol`\r\n    }\r\n    return undefined\r\n}\r\ntype RecuiredType = (value: string) => string | undefined\r\n\r\nexport const required:RecuiredType= (value) => (value? undefined : 'Required')\r\nexport type ValidatorsType = MaxLengthType|RecuiredType\r\n// export const maxLengthCreator = (lengthNum) =>{ \r\n//     return(\r\n//         (value) =>{\r\n//         if(!value||value.length<lengthNum) return undefined;\r\n//         return` Max lenght is ${lengthNum} simbol!!!`\r\n//         }\r\n//     )\r\n   \r\n// }","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport styles from './Login.module.css'\r\nimport { Input } from '../../commons/Input'\r\nimport { maxLengthCreator, required } from '../../commons/validators'\r\nimport { createField } from '../../commons/CreateField'\r\nimport { LoginDataValueType} from './Login'\r\n\r\n\r\n\r\ntype PropsType= {\r\n    captchaSrc: string|null\r\n}\r\nconst maxLength = maxLengthCreator(25)\r\n\r\ntype NameType = Extract<keyof LoginDataValueType, string>\r\nconst LoginForm: React.FunctionComponent<InjectedFormProps<LoginDataValueType,PropsType>&PropsType> = ({ handleSubmit, error ,captchaSrc} ) => {\r\n    return (\r\n        <div className={styles.loginForm}>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className={styles.field}>\r\n                    {createField<NameType>(\"email\", 'email', [maxLength, required], Input, {}, \"\")}\r\n                </div>\r\n                <div className={styles.field}>\r\n                    {createField<NameType>('password', 'password', [maxLength, required], Input, { type: 'password' }, \"\")}\r\n                </div>\r\n                {captchaSrc\r\n                    ? <div className={styles.field}>\r\n                        {createField<NameType>('captcha', 'captcha', [maxLength, required], Input, {}, \"\")}\r\n                        <img src={captchaSrc} />\r\n                    </div>\r\n                    : \"\"\r\n                }\r\n                <div className={styles.checkbox}>\r\n                    {createField<NameType>('rememberMe', \"\", [], Input, { type: 'checkbox' }, 'Remember')}\r\n                </div>\r\n                <button className={styles.button}>Go to profile</button>\r\n            </form>\r\n            {error && <div className={styles.error}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginDataValueType, PropsType>({ form: 'login' })(LoginForm)\r\n\r\nexport default LoginReduxForm\r\n","import React from 'react'\r\nimport LoginReduxForm from './LoginForm'\r\nimport styles from './Login.module.css'\r\nimport Aos from 'aos'\r\nimport 'aos/dist/aos.css'\r\nimport { useEffect } from 'react'\r\n\r\n\r\nexport type LoginDataValueType ={email : string,password: string,rememberMe : boolean,captcha : string}\r\nexport type SetLoginDataType =(email : string,password: string,rememberMe : boolean,captcha :string)=>void\r\nexport type LoginPropsType = {\r\n    setLoginData : (email : string,password: string,rememberMe : boolean,captcha : string)=>void\r\n    captchaSrc: string|null\r\n}\r\nconst Login :React.FC<LoginPropsType> = (props) =>{\r\n    useEffect(() => {\r\n        Aos.init({ duration: 1500 })\r\n    }, [])\r\n    let setData = (value:LoginDataValueType)=>{\r\n        props.setLoginData(value.email,value.password,value.rememberMe,value.captcha)\r\n    }\r\n    return (\r\n        <div className ={styles.login} data-aos='zoom-in'>\r\n            <h2>Are you registrated?</h2>\r\n            <LoginReduxForm onSubmit ={setData}  captchaSrc={props.captchaSrc}  />\r\n            <br/>\r\n\r\n            (email:  <b>free@samuraijs.com</b> )<br/>\r\n            (pasword:   <b>free</b>)\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport Login from './Login';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PreLoader from '../../commons/PreLoader';\r\nimport { compose } from 'redux';\r\nimport { WithClearProfileData } from '../../HOCS/Hocs';\r\nimport { RootState } from '../../../redux/reduxStore';\r\nimport {setLoginData} from '../../../redux/auth-reducer'\r\n\r\nconst LoginContainer: React.FunctionComponent<PropsType> = (props) => {\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile' />;\r\n    } else if (props.loading) {\r\n        return <PreLoader />;\r\n    }\r\n    return (\r\n        <Login setLoginData={props.setLoginData} captchaSrc = {props.captchaSrc}/>\r\n\r\n    );\r\n};\r\ntype OwnPropsType = {};\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean;\r\n    loading: boolean;\r\n    captchaSrc : string|null\r\n};\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        loading: state.auth.loading,\r\n        captchaSrc:state.auth.captchaSrc\r\n    };\r\n};\r\ntype MapDispatchToPropsType = {\r\n    setLoginData: (email: string, password: string, rememberMe: boolean,captcha :string) => void;\r\n};\r\nexport default compose<React.ComponentType>(WithClearProfileData, connect(mapStateToProps, { setLoginData }))(LoginContainer);\r\n","import React from 'react'\r\nimport { ContactsType } from '../../../commons/CommonsFileTypes/ProfileType'\r\nimport styles from './PersonData.module.css'\r\ntype PropsType ={\r\n    contacts:ContactsType\r\n}\r\nconst Contacts : React.FunctionComponent<PropsType>= ({contacts}) => {\r\n    return (\r\n        <div className={styles.contacts}>\r\n            {Object.keys(contacts).map(key => {\r\n                return (\r\n                    <div key ={key}>\r\n                        <b>{key} :</b> {contacts[key as keyof ContactsType]||`here can be your ${key} adress`}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Contacts\r\n","import React from 'react'\r\nimport { createField } from '../../../commons/CreateField'\r\nimport { Input, Textarea } from '../../../commons/Input'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport styles from './PersonData.module.css'\r\nimport { ProfileType } from '../../../commons/CommonsFileTypes/ProfileType'\r\n\r\ntype PropsType = {\r\n\r\n}\r\nconst PersonDataForm :React.FunctionComponent<InjectedFormProps<ProfileType>> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.error}>\r\n                {props.error}\r\n            </div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <b>FullName </b> {createField('fullName', '', [], Input,{},'')}\r\n                    <b>AboutMe </b> {createField('aboutMe', '', [], Textarea,{},'')}\r\n                    <b>Lookingfor a job </b> {createField('lookingForAJob', '', [], Input, { type: 'checkbox' },'')}\r\n                    <b>Lookingfor a job description :</b> {createField('lookingForAJobDescription', '', [], Textarea,{},'')}\r\n                    <b>Facebook</b> {createField('contacts.facebook', '', [], Input,{},'')}\r\n                    <b>Website</b> {createField('contacts.webSite', '', [], Input,{},'')}\r\n                    <b>Vk</b> {createField('contacts.vk', '', [], Input,{},'')}\r\n                    <b>Twitter</b> {createField('contacts.twitter', '', [], Input,{},'')}\r\n                    <b>Instagram</b> {createField('contacts.instagram', '', [], Input,{},'')}\r\n                    <b>Youtube</b> {createField('contacts.youtube', '', [], Input,{},'')}\r\n                    <b>Github</b> {createField('contacts.github', '', [], Input,{},'')}\r\n                    <b>Mainlink</b> {createField('contacts.mainLink', '', [], Input,{},'')}\r\n                    <button>Save</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfileType>({ form: 'personData' })(PersonDataForm)","import React from 'react'\r\nimport {  ProfileType } from '../../../commons/CommonsFileTypes/ProfileType'\r\nimport Contacts from './Contacts'\r\nimport styles from './PersonData.module.css'\r\nimport PersonDataForm from './PersonDataForm'\r\n\r\n\r\n\r\ntype PropsType ={\r\n    profile: ProfileType\r\n    setEditMode : (editMode: boolean) => void\r\n    editMode : boolean\r\n    updateUserData:(data: ProfileType) => void\r\n    showEditButtons:boolean\r\n}\r\n\r\nconst PersonData : React.FunctionComponent<PropsType> = ({ profile, setEditMode, editMode,updateUserData,showEditButtons }) => {\r\n\r\n    \r\n    const onSubmit = (value : ProfileType) =>{\r\n        updateUserData(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div className= {styles.form}>\r\n                    <PersonDataForm  initialValues = {profile} onSubmit= {onSubmit}/>\r\n                </div>\r\n                : <div className={styles.personData}>\r\n                    <div>\r\n                        <b>Full name :</b> {profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        <b>About me :</b> {profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        <b>Lookingfor a job :</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>Lookingfor a job description :</b> {profile.lookingForAJobDescription}\r\n                        </div>\r\n                    }\r\n                    <div>\r\n                        \r\n                        <b>Contacts : </b> <Contacts contacts={profile.contacts} />\r\n                    </div>\r\n                    {showEditButtons&&<button className={styles.button} onClick={() => setEditMode(true)}>Edit my data</button>}\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PersonData\r\n","import React, { useState, useEffect } from 'react'\r\nimport styles from './Profile.module.css'\r\n\r\ntype PropsType = {\r\n    status: string | undefined\r\n    setUserStatus: (status: string | string) => void\r\n    showEditButtons: boolean\r\n}\r\n\r\nexport const Status: React.FunctionComponent<PropsType> = ({ status, setUserStatus, showEditButtons }) => {\r\n    useEffect(() => { setStatus(status) }, [status])\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let updateStatus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setEditMode(false)\r\n        setUserStatus(e.target.value)\r\n    }\r\n\r\n    let [inputValue, setStatus] = useState(status)\r\n\r\n    let setStatusValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.target.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={showEditButtons ? styles.statusCursor : \"\"}>\r\n            {showEditButtons\r\n                ? <div>\r\n                    {editMode\r\n                        ? <div>\r\n                            <input onChange={(e) => setStatusValue(e)} autoFocus={true} onBlur={(e) => updateStatus(e)} value={inputValue} />\r\n                        </div>\r\n                        : <div onClick={() => setEditMode(true)}>\r\n                            <span>{status || '-----'}</span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                : <div>\r\n                    {status || 'I will write status after sometime...'}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Status","import React from 'react'\r\nimport styles from './Profile.module.css'\r\nimport userPhoto from '../../../images/userPhoto.jpg'\r\nimport { PhotosType } from '../../../redux/user-reducer'\r\ntype PropsType = {\r\n    photos:PhotosType\r\n    loadFile:(photos: File|null) => void\r\n    showEditButtons :boolean\r\n}\r\n\r\nconst UserImage:React.FunctionComponent<PropsType> = ({ photos, loadFile,showEditButtons }) => {\r\n    let loadImage = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            loadFile(e.target.files[0])\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <img src={photos.large||userPhoto}  className = {styles.img}/>\r\n            <div className={styles.imgButton}>\r\n                <input type=\"file\" onChange={(e) => { loadImage(e) }} id='hidden' />\r\n               { showEditButtons&&<label htmlFor=\"hidden\">Update image</label>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UserImage","import React from 'react'\r\nimport loader from '../../images/preLoader.gif'\r\nimport styles from './PreLoader.module.css'\r\n\r\n\r\n\r\nconst SmallPreLoader = () => {\r\n    return(\r\n        <div >\r\n<img src={loader} className = {styles.small}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SmallPreLoader","import React, { useEffect } from 'react'\r\nimport PersonData from './PersonData/PersonData'\r\nimport styles from './Profile.module.css'\r\nimport Status from './Status'\r\nimport UserImage from './UserImage'\r\nimport PreLoader from '../../commons/PreLoader'\r\nimport Aos from 'aos'\r\nimport 'aos/dist/aos.css'\r\nimport SmallPreLoader from '../../commons/SmallPreLoader'\r\nimport { ProfilePropsType } from './ProfileContainer'\r\n\r\n\r\n\r\n\r\nconst Profile:React.FunctionComponent<ProfilePropsType> = ({ profile, status, editMode, setEditMode, updateUserData, setUserStatus, loadFile,loadingInProgres,showEditButtons}) => {\r\n    useEffect(() => {\r\n        Aos.init({ duration: 1000 })\r\n    }, [])\r\n\r\n    if (profile) {\r\n        return (\r\n            <div data-aos=\"flip-left\"\r\n     data-aos-easing=\"ease-out-cubic\"\r\n     data-aos-duration=\"2000\"  className = {styles.profile}>\r\n                <div>\r\n                {loadingInProgres&& <SmallPreLoader/>}<UserImage photos={profile.photos} loadFile={loadFile} showEditButtons={showEditButtons}/>\r\n                </div>\r\n\r\n                <div className={styles.status}>\r\n                    <Status status={status} setUserStatus={setUserStatus} showEditButtons={showEditButtons}/>\r\n                </div>\r\n\r\n                <div >\r\n                    <PersonData profile={profile} editMode={editMode} setEditMode={setEditMode} updateUserData={updateUserData} showEditButtons={showEditButtons}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return <PreLoader />\r\n\r\n}\r\n\r\n\r\nexport default Profile","import { RootState } from \"../reduxStore\"\r\n\r\nexport const profileSelector = (state:RootState) => {\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const idSelector = (state:RootState) => {\r\n    return state.auth.id\r\n}\r\n\r\nexport const statusSelector = (state:RootState) => {\r\n    return state.profilePage.status\r\n}\r\n\r\nexport const editModeSelector = (state:RootState) => {\r\n    return state.profilePage.editMode\r\n}\r\n\r\nexport const loadingInProgresSelector = (state:RootState) => {\r\n    return state.profilePage.loadingInProgres\r\n}\r\n\r\nexport const showEditButtonsSelector = (state:RootState) => {\r\n    return state.profilePage.showEditButtons\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { getUserProfile, getUserStatus, actions, updateUserData, setUserStatus, loadFile} from '../../../redux/profile-reducer'\r\nimport { compose } from 'redux'\r\nimport { profileSelector, idSelector, statusSelector, editModeSelector, loadingInProgresSelector, showEditButtonsSelector } from '../../../redux/selectores/profile-selector'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { WithPaginatorVisibility } from '../../HOCS/Hocs'\r\nimport { RootState } from '../../../redux/reduxStore'\r\nimport { ProfileType } from \"../../commons/CommonsFileTypes/ProfileType\"\r\n\r\n\r\ntype Params = {\r\n    id : string\r\n}\r\nclass ProfileContainer extends React.Component<ProfilePropsType&RouteComponentProps<Params>>{\r\n\r\n    componentDidMount() {\r\n        this.props.setEditMode(false)\r\n        let id:number|null = +this.props.match.params.id || this.props.id\r\n      \r\n        if (!id) {\r\n            id = this.props.id\r\n        }\r\n\r\n        if (!id) {\r\n            this.props.history.push(\"/login\"); \r\n        }\r\n        if (id) {\r\n            this.props.getUserProfile(id)\r\n            this.props.getUserStatus(id)\r\n        }\r\n\r\n        id === this.props.id ? this.props.setShowEditButtonsMode(true) : this.props.setShowEditButtonsMode(false)\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps:ProfilePropsType&RouteComponentProps<Params>) {\r\n        if (prevProps.match.params.id != this.props.match.params.id) {\r\n            this.componentDidMount()\r\n        } else if (!this.props.id && !prevProps.match.params.id) {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} />\r\n        )\r\n    }\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    id: number | null\r\n    status: string | undefined\r\n    editMode: boolean\r\n    loadingInProgres: boolean\r\n    showEditButtons: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (id: number) => void\r\n    getUserStatus: (id: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    updateUserData: (data: ProfileType) => void\r\n    setUserStatus: (status: string) => void\r\n    loadFile: (photos: File|null) => void\r\n    setShowEditButtonsMode: (showEditButtons: boolean) => void\r\n}\r\nconst setEditMode = actions.setEditMode\r\nconst setShowEditButtonsMode =actions.setShowEditButtonsMode\r\nexport type ProfilePropsType = MapDispatchToPropsType&MapStateToPropsType\r\nlet mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n    return {\r\n        profile: profileSelector(state),\r\n        id: idSelector(state),\r\n        status: statusSelector(state),\r\n        editMode: editModeSelector(state),\r\n        loadingInProgres: loadingInProgresSelector(state),\r\n        showEditButtons: showEditButtonsSelector(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(WithPaginatorVisibility, withRouter, connect(mapStateToProps,\r\n    { getUserProfile, getUserStatus, setEditMode, updateUserData, setUserStatus, loadFile, setShowEditButtonsMode }))(ProfileContainer)","import React from 'react'\r\nimport ReactPlayer from 'react-player'\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n           <h1>Here will be  music</h1> \r\n            <ReactPlayer controls url=\"https://www.youtube.com/watch?v=7P6X3IWLECY\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React, { useState, Suspense } from 'react';\nimport styles from './App.module.css'\nimport Header from './Components/Header/Header';\nimport Navbar from './Components/Navbar/Navbar';\nimport { Redirect, Route } from 'react-router-dom';\nimport LoginContainer from './Components/Content/Login/LoginContainer';\nimport ProfileContainer from './Components/Content/Profile/ProfileContainer';\nimport PreLoader from './Components/commons/PreLoader';\nimport Music from './Components/Music/Music';\n\n\n\n\nconst UsersContainer = React.lazy(() => import('./Components/Content/Users/UsersContainer'))\nconst DialogsContainer = React.lazy(() => import('./Components/Content/Dialogs/Dialogs'))\n\nfunction App() {\n  let [activNavbar, setNavbarStatus] = useState(false)\n  return (\n    <div className={styles.app}>\n      <div className={styles.burger} onClick={() => setNavbarStatus(!activNavbar)}>\n        {activNavbar\n          ? <span >X</span>\n          : <b ></b>\n        }\n      </div>\n      <div>\n          <Route exact path='/' render={() => <Redirect to={\"/profile\"} />} />\n        </div>\n      <div className={styles.header}>\n        <Header />\n      </div>\n      <div className={activNavbar ? styles.navbarActivate : styles.navbar} >\n        <Navbar />\n      </div>\n      <div className={styles.content}>\n        <div>\n          <Route  path='/profile/:id?' render={() => <ProfileContainer />} />\n        </div>\n        <div><Suspense fallback={<PreLoader/>}>\n        <Route path='/dialogs' render={() => <DialogsContainer />} />\n        </Suspense>\n        </div>\n        <div>\n          <Suspense fallback = {<PreLoader/>}>\n            <Route path='/users' render={() => <UsersContainer />} />\n          </Suspense>\n        </div>\n        <div className={styles.login}>\n          <Route path='/login' render={() => <LoginContainer />} />\n        </div>\n        <div>\n          <Route path='/music' render={() => <Music />} />\n        </div>\n        <div>\n          <Route path='/setting' render={() => <h1>Here will be Settings</h1>} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport App from './App'\r\nimport { connect } from 'react-redux'\r\nimport { isInitialaized } from './redux/app-reducer'\r\nimport PreLoader from './Components/commons/PreLoader'\r\nimport { compose } from 'redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { RootState } from './redux/reduxStore'\r\n\r\nclass AppContainer extends React.Component<PropsType&RouteComponentProps>{\r\n    componentDidMount() {\r\n        this.props.isInitialaized()\r\n    }\r\n    render() {\r\n        if (!this.props.initialaiz) {\r\n            return <PreLoader />\r\n        }\r\n        return (\r\n            <App />\r\n        ) \r\n    }\r\n}\r\ntype MapStateToPropstype = {\r\ninitialaiz : boolean\r\n}\r\ntype MapDispatchToPropstype = {\r\n    isInitialaized : ()=>void\r\n}\r\nlet mapStateToProps = (state:RootState) => {\r\n    return {\r\n        initialaiz: state.app.initialaiz\r\n    }\r\n}\r\ntype PropsType= MapDispatchToPropstype&MapStateToPropstype\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, { isInitialaized }),withRouter)(AppContainer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport store from './redux/reduxStore'\nimport {Provider} from 'react-redux'\nimport AppContainer from './AppContainer';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store = {store}>\n        <AppContainer />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"personData\":\"PersonData_personData__3USen\",\"button\":\"PersonData_button__KYnlX\",\"form\":\"PersonData_form__3uIU7\",\"contacts\":\"PersonData_contacts__3zv5L\",\"error\":\"PersonData_error__3dNe3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2cHt9\",\"status\":\"Profile_status__3HOpo\",\"statusCursor\":\"Profile_statusCursor__2Cl4v\",\"img\":\"Profile_img__1O4I7\",\"imgButton\":\"Profile_imgButton__CoMYv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2XoWq\",\"navbar\":\"App_navbar__1rex-\",\"content\":\"App_content__1BF8X\",\"header\":\"App_header__3LGSv\",\"burger\":\"App_burger__3XqN9\",\"login\":\"App_login__2NcsN\",\"navbarActivate\":\"App_navbarActivate__2a-34\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarItems\":\"Navbar_navbarItems__1ipNR\",\"selectedItem\":\"Navbar_selectedItem__6ajgT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__1UgA8\",\"inputError\":\"Input_inputError__biVWe\",\"inputStyle\":\"Input_inputStyle__sm57F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3jNZU\",\"elements\":\"Header_elements__1UGEc\",\"logout\":\"Header_logout__1U13N\",\"header\":\"Header_header__24AYe\"};","import { AxiosResponse } from 'axios';\r\nimport { UserType } from '../redux/user-reducer';\r\nimport { instanse, MainResponseType } from './api';\r\n\r\ntype UserDataType = {\r\n    items : Array<UserType>\r\n    totalCount: number\r\n    error : Array<string>\r\n}\r\nexport const userApi = {\r\n    getUsersData(count: number, page: number,term:string='',friend : boolean|null) {\r\n        return instanse.get(`users?count=${count}&page=${page}&term=${term}&friend=${friend}`)\r\n            .then((response:AxiosResponse<UserDataType>) => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n        return instanse.post(`follow/${userId}`)\r\n            .then((response: AxiosResponse<MainResponseType>) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    unFollow(userId: number) {\r\n        return instanse.delete(`follow/${userId}`)\r\n            .then((response: AxiosResponse<MainResponseType>) => {\r\n                return response.data;\r\n            });\r\n    }\r\n};\r\n","import { userApi } from \"../../API/userApi\";\r\n\r\nexport function followUnfollowFlow(follow: boolean, id: number) {\r\n    if (follow) {\r\n        return userApi.follow(id);\r\n    }\r\n    return userApi.unFollow(id);\r\n}\r\n","import { ThunkAction } from \"redux-thunk\"\r\nimport { ResultCodeType } from \"../API/api\"\r\nimport { userApi } from \"../API/userApi\"\r\nimport { followUnfollowFlow } from \"../Components/commons/followUnfollowFlow\"\r\nimport { InferActionsType, RootState } from \"./reduxStore\"\r\n\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_PORCE_NUMBER = 'SET_PORCE_NUMBER'\r\nconst SET_FOLLOW_UNFOLLOW_USER = 'SET_FOLLOW_UNFOLLOW_USER'\r\nconst FOLLOW_IN_PROGRES = 'FOLLOW_IN_PROGRES'\r\nconst SHOW_LOADER = 'SHOW_LOADER'\r\nconst SET_FILTER_VIZIBILITY = 'SET_FILTER_VIZIBYLITY'\r\nconst SET_FILTER = 'SET_FILTER'\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nconst initialState = {\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    },\r\n    totalCount: 0,\r\n    pageSize: 100,\r\n    porcionSize: 10,\r\n    porceNumber: 1,\r\n    currentPage: 1,\r\n    users: [] as Array<UserType>,\r\n    followInProgres: [] as Array<number>,\r\n    showLoader: false,\r\n    filterVizibility: false\r\n}\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype FilterType = {\r\n    term: string\r\n    friend: null | boolean\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst UserReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case 'SET_FILTER_VIZIBYLITY':\r\n            return {\r\n                ...state,\r\n                filterVizibility: action.filterVizibility\r\n            }\r\n        case 'SET_TOTAL_COUNT':\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SET_PORCE_NUMBER':\r\n            return {\r\n                ...state,\r\n                porceNumber: action.porceNumber\r\n            }\r\n        case 'SET_FOLLOW_UNFOLLOW_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: action.follow }\r\n                    }\r\n                    return u\r\n\r\n                })\r\n            }\r\n        case 'FOLLOW_IN_PROGRES':\r\n            return {\r\n                ...state,\r\n                followInProgres: action.isFetching\r\n                    ? [...state.followInProgres, action.id]\r\n                    : state.followInProgres.filter(id => id != action.id)\r\n            }\r\n        case 'SHOW_LOADER':\r\n            return {\r\n                ...state,\r\n                showLoader: action.showLoader\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const userActions = {\r\n    setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users } as const),\r\n    setFilter: ({ term, friend }: FilterType) => ({ type: SET_FILTER, payload: { term, friend } } as const),\r\n    setUsersFilter: (users: Array<UserType>) => ({ type: SET_USERS, users } as const),\r\n    setTotalCount: (totalCount: number) => ({ type: SET_TOTAL_COUNT, totalCount } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: SET_CURRENT_PAGE, currentPage } as const),\r\n    setPorceNumber: (porceNumber: number) => ({ type: SET_PORCE_NUMBER, porceNumber } as const),\r\n    setFollowUnfollowUser: (follow: boolean, id: number) => ({ type: SET_FOLLOW_UNFOLLOW_USER, id, follow } as const),\r\n    setFolowInProgres: (isFetching: boolean, id: number) => ({ type: FOLLOW_IN_PROGRES, isFetching, id } as const),\r\n    setShowLoader: (showLoader: boolean) => ({ type: SHOW_LOADER, showLoader } as const),\r\n    setFilterVizibility: (filterVizibility: boolean) => ({ type: SET_FILTER_VIZIBILITY, filterVizibility } as const)\r\n}\r\n\r\n\r\ntype ActionsType = InferActionsType<typeof userActions>\r\n\r\nexport const getUsers = (pageSize: number, currentPage: number, term: string, friend: boolean | null): ThunkAction<void, RootState, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(userActions.setShowLoader(true))\r\n    dispatch(userActions.setFilter({ term, friend }))\r\n    let data = await userApi.getUsersData(pageSize, currentPage, term, friend)\r\n    dispatch(userActions.setUsers(data.items))\r\n    dispatch(userActions.setTotalCount(data.totalCount))\r\n    dispatch(userActions.setCurrentPage(currentPage))\r\n    dispatch(userActions.setShowLoader(false))\r\n}\r\n\r\nexport const getCurrentPage = (pageSize: number, currentPage: number, porceNumber: number, term: string,\r\n    friend: boolean | null): ThunkAction<void, RootState, unknown, ActionsType> => async (dispatch) => {\r\n        dispatch(userActions.setShowLoader(true))\r\n        let data = await userApi.getUsersData(pageSize, currentPage, term, friend)\r\n        dispatch(userActions.setUsers(data.items))\r\n        dispatch(userActions.setCurrentPage(currentPage))\r\n        dispatch(userActions.setPorceNumber(porceNumber))\r\n        dispatch(userActions.setShowLoader(false))\r\n\r\n    }\r\nexport const followUnfollowUser = (follow: boolean, id: number): ThunkAction<void, RootState, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(userActions.setFolowInProgres(true, id))\r\n    let data = await followUnfollowFlow(follow, id)\r\n    if (data.resultCode === ResultCodeType.Success) {\r\n        dispatch(userActions.setFollowUnfollowUser(follow, id))\r\n        dispatch(userActions.setFolowInProgres(false, id))\r\n    }\r\n}\r\n\r\nexport default UserReducer\r\n\r\n\r\n","import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { userActions} from '../../redux/user-reducer'\r\nimport { actions } from '../../redux/profile-reducer'\r\nimport { RootState } from '../../redux/reduxStore'\r\nimport { ProfileType } from \"../commons/CommonsFileTypes/ProfileType\"\r\n\r\nexport function withRedirectToLogin<WCP>(Component:React.ComponentType<WCP>){\r\n    let mapStateToProps = (state:RootState) => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    }\r\n    type MapStateType = {\r\n        isAuth :boolean\r\n    }\r\n    type MapDispatchType={}\r\n    let RedirectComponenet: React.FC<MapStateType&MapDispatchType> = (props) => {\r\n      let  {isAuth,...restProps}=props\r\n        if (!props.isAuth) return <Redirect to='/login' />\r\n        \r\n        return (\r\n            <Component {...restProps  as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<MapStateType,MapDispatchType,WCP,RootState>(mapStateToProps, {})(RedirectComponenet)\r\n}\r\n\r\n\r\n\r\nexport function WithPaginatorVisibility<WCP>(Component:React.FunctionComponent<WCP>){\r\n    const setShowLoader = userActions.setShowLoader\r\n    let mapStateToProps = () => {\r\n        return {\r\n            \r\n        }\r\n    }\r\n    type MapDispatchToPropsType={\r\n        setShowLoader: (showLoader : boolean)=>void\r\n    }\r\n    let PaginatorVisibility:React.FunctionComponent<MapDispatchToPropsType>= (props) => {\r\n      useEffect(()=>{props.setShowLoader(true)},[])  \r\n      let {setShowLoader,...restProps}=props\r\n        return (\r\n            <Component {...restProps as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<{},MapDispatchToPropsType,WCP,RootState>(mapStateToProps, {setShowLoader})(PaginatorVisibility)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function WithClearProfileData<WCP>(Component:React.FunctionComponent<WCP>){\r\n    const setProfile = actions.setProfile\r\n    let mapStateToProps = () => {\r\n        return {\r\n            \r\n        }\r\n    }\r\n    type MapDispatchToPropsType={\r\n        setProfile: (profile : ProfileType|null)=>void\r\n    }\r\n    let ClearProfile:React.FunctionComponent<MapDispatchToPropsType>= (props) => {\r\n        let {setProfile,...restProps}=props\r\n      useEffect(()=>{props.setProfile(null)},[])  \r\n        return (\r\n            <Component {...restProps as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<{},MapDispatchToPropsType,WCP,RootState>(mapStateToProps, {setProfile})(ClearProfile)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/preLoader.2b02159f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"small\":\"PreLoader_small__25MFo\",\"preLoader\":\"PreLoader_preLoader__1uL8f\"};"],"sourceRoot":""}