{"version":3,"sources":["Components/Content/Users/Users.module.css","Components/commons/Pageinator.module.css","redux/selectores/users-selector.ts","Components/commons/Select.tsx","Components/Content/Users/UsersFilter.tsx","Components/Content/Users/Users.tsx","Components/commons/Paginator.tsx","Components/Content/Users/UsersContainer.tsx"],"names":["module","exports","termSelector","state","usersPage","filter","term","filterFizibilitySelector","filterVizibility","friendSelector","friend","pageSizeSelector","pageSize","totalCountSelector","totalCount","porcionSizeSelector","porcionSize","porceNumberSelector","porceNumber","currentPageSelector","currentPage","usersSelector","createSelector","users","u","followInProgresSelector","followInProgres","showLoaderSelector","showLoader","Select","React","memo","props","meta","input","restProps","className","styles","selectStyle","name","value","UsersFilterForm","reduxForm","form","handleSubmit","dispatch","useDispatch","formContainer","filterIconBlok","onClick","userActions","setFilterVizibility","onSubmit","blank","createField","type","Input","history","useHistory","useSelector","useEffect","Aos","init","duration","push","pathname","search","parsed","queryString","parse","location","actualPage","actualTerm","actualFriend","page","Number","getUsers","initialForm","onChange","debounce","friendValue","enableReinitialize","initialValues","PreLoader","pagesss","pages","pagesCount","Math","ceil","porceCount","firstPage","lastPage","i","setCurrentPorceNumber","getCurrentPage","pageinators","pageinator","changer","map","p","key","Paginator","container","userItem","id","data-aos","itemName","to","src","photos","small","followedUser","followUnfollowUser","followed","disabled","some","UsersContainer","compose","WithClearProfileData"],"mappings":"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","file":"static/js/4.63279b16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Users_form__12XNM\",\"formContainer\":\"Users_formContainer__312xl\",\"selectStyle\":\"Users_selectStyle__2ehBV\",\"filterIconBlok\":\"Users_filterIconBlok__a1Z4l\",\"button\":\"Users_button__2BuwB\",\"photos\":\"Users_photos__309FI\",\"userItem\":\"Users_userItem__72sAI\",\"itemName\":\"Users_itemName__nrC7o\",\"followedUser\":\"Users_followedUser__3a6OV\",\"container\":\"Users_container__3KIOo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageinator\":\"Pageinator_pageinator__3KsqG\",\"page\":\"Pageinator_page__3OKdX\",\"currentPage\":\"Pageinator_currentPage__WMBvy\",\"changer\":\"Pageinator_changer__31QIJ\"};","import { createSelector } from 'reselect'\r\nimport { RootState } from '../reduxStore'\r\n\r\n\r\nexport const termSelector = (state:RootState) => {\r\n    return state.usersPage.filter.term\r\n}\r\nexport const filterFizibilitySelector = (state:RootState) => {\r\n    return state.usersPage.filterVizibility\r\n}\r\nexport const friendSelector = (state:RootState) => {\r\n    return state.usersPage.filter.friend\r\n}\r\nexport const pageSizeSelector = (state:RootState) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const totalCountSelector = (state:RootState) => {\r\n    return state.usersPage.totalCount\r\n}\r\n\r\nexport const porcionSizeSelector = (state:RootState) => {\r\n    return state.usersPage.porcionSize\r\n}\r\n\r\nexport const porceNumberSelector = (state:RootState) => {\r\n    return state.usersPage.porceNumber\r\n}\r\n\r\nexport const currentPageSelector = (state:RootState) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\n const usersHelper = (state:RootState) => {\r\n    return state.usersPage.users \r\n}\r\n\r\nexport const usersSelector = createSelector(usersHelper,(users)=>{\r\n    return users.filter( u=>{ return u})\r\n})\r\n\r\n// export const isFetchingSelector = (state:RootState) => {\r\n//     return state.usersPage.isFetching\r\n// }\r\n\r\nexport const followInProgresSelector = (state:RootState) => {\r\n    return state.usersPage.followInProgres\r\n}\r\n\r\nexport const showLoaderSelector = (state:RootState) => {\r\n    return state.usersPage.showLoader\r\n}\r\n","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\nimport styles from '../Content/Users/Users.module.css';\r\n\r\n\r\n\r\nexport const Select: React.FunctionComponent<WrappedFieldProps> = React.memo((props) => {\r\n    const { meta, input, ...restProps } = props;\r\n    return (\r\n        <div >\r\n            <select className={styles.selectStyle} {...input} {...restProps} name='friend'>\r\n                <option value=\"all\">All users</option>\r\n                <option value=\"true\">Followed users</option>\r\n                <option value=\"false\">Unfollowed users</option>\r\n            </select>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { createField } from '../../commons/CreateField'\r\nimport { Input } from '../../commons/Input'\r\nimport { Select } from '../../commons/Select'\r\nimport styles from './Users.module.css'\r\nimport {userActions} from '../../../redux/user-reducer'\r\n\r\ntype FormData = {\r\n    term: string\r\n    friend: string\r\n}\r\ntype PropsType = {\r\n    filterVizibility: boolean\r\n}\r\ntype NameType = Extract<keyof FormData, string>\r\n\r\nconst UsersFilter: React.FunctionComponent<InjectedFormProps<FormData, PropsType> & PropsType> = ({ handleSubmit, filterVizibility}) => {\r\n    const dispatch = useDispatch()\r\n    const onClick = () => {\r\n        dispatch(userActions.setFilterVizibility(!filterVizibility))\r\n    }\r\n    return (\r\n        <div className={styles.formContainer}  >\r\n            <div className={styles.form}>\r\n                <div className={styles.filterIconBlok} onClick={onClick}>\r\n                    Filter\r\n                 </div >\r\n                {filterVizibility\r\n                    ? <form onSubmit={handleSubmit} className={styles.blank}>\r\n                        {createField<NameType>(\"friend\", \"\", [], Select, {type:\"select\" }, '')}\r\n                        {createField<NameType>(\"term\", \"enter user name\", [], Input, { type: 'search'}, '')}\r\n                        <button>ppp</button>\r\n                    </form>\r\n                    : \"\"\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nconst UsersFilterForm = reduxForm<FormData, PropsType>({ form: 'usersFilter'})(UsersFilter)\r\nexport default UsersFilterForm\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import Aos from 'aos'\r\nimport 'aos/dist/aos.css'\r\nimport { debounce } from 'lodash'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport photos from '../../../images/userPhoto.jpg'\r\nimport {\r\n    currentPageSelector, filterFizibilitySelector, followInProgresSelector,\r\n    friendSelector, pageSizeSelector, porceNumberSelector, porcionSizeSelector,\r\n    showLoaderSelector,\r\n    termSelector, totalCountSelector, usersSelector\r\n} from '../../../redux/selectores/users-selector'\r\nimport { followUnfollowUser, getUsers } from '../../../redux/user-reducer'\r\nimport { Paginator } from '../../commons/Paginator'\r\nimport PreLoader from '../../commons/PreLoader'\r\nimport styles from './Users.module.css'\r\nimport UsersFilterForm from './UsersFilter'\r\nimport queryString from 'query-string'\r\n\r\n\r\nexport type ValueType = {\r\n    term: string\r\n    friend: string\r\n}\r\n\r\nconst Users: React.FC = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const users = useSelector(usersSelector)\r\n    const totalCount = useSelector(totalCountSelector)\r\n    const pageSize = useSelector(pageSizeSelector)\r\n    const porcionSize = useSelector(porcionSizeSelector)\r\n    const porceNumber = useSelector(porceNumberSelector)\r\n    let currentPage = useSelector(currentPageSelector)\r\n    const followInProgres = useSelector(followInProgresSelector)\r\n    const term = useSelector(termSelector)\r\n    const friend = useSelector(friendSelector)\r\n    const filterVizibility = useSelector(filterFizibilitySelector)\r\n\r\n    useEffect(() => { Aos.init({ duration: 1500 }) }, [])\r\n\r\n    \r\n    useEffect(() => {\r\n        history.push({\r\n            pathname: `/users`,\r\n            search: `?count=100&page=${currentPage}&term=${term}&friend=${friend}`\r\n        })\r\n    }, [term, friend, currentPage])\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search)\r\n        let actualPage = currentPage\r\n        let actualTerm = term\r\n        let actualFriend = friend\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualTerm = parsed.term as string\r\n        switch (parsed.friend) {\r\n            case \"true\": actualFriend = true\r\n                break\r\n            case \"false\": actualFriend = false\r\n                break\r\n            case \"null\": actualFriend = null\r\n                break\r\n\r\n        }\r\n        dispatch(getUsers(pageSize, actualPage, actualTerm, actualFriend))\r\n    }, [])\r\n\r\n\r\n\r\n \r\n    const showLoader = useSelector(showLoaderSelector)\r\n\r\n    const initialForm = {\r\n        term: term,\r\n        friend: friend === true ? \"true\" : friend === false ? \"false\" : \"all\"\r\n    }\r\n    const onChange = debounce((value: ValueType) => {\r\n        let friendValue = value.friend === \"true\" ? true : value.friend === \"false\" ? false : null\r\n        if(value!=initialForm) dispatch(getUsers(pageSize, currentPage = 1, value.term, friendValue))\r\n        \r\n    }, 800)\r\n    return (\r\n        <div>\r\n            <div>\r\n                <UsersFilterForm onChange={onChange} filterVizibility={filterVizibility} enableReinitialize initialValues={initialForm}/>\r\n            </div>\r\n            {showLoader\r\n                ? <div >\r\n                    <PreLoader />\r\n                </div>\r\n\r\n                : <div>\r\n                    <div className={styles.pagesss}>\r\n                        {Paginator({ term, friend, totalCount, pageSize, porcionSize, porceNumber, currentPage,dispatch })}\r\n                    </div>\r\n                    <div className={styles.container} >\r\n                        {users.map(u => {\r\n                            return (\r\n                                <div className={styles.userItem} key={u.id} data-aos='fade-down'>\r\n                                    <div className={styles.itemName}>\r\n                                        {u.name}\r\n                                    </div>\r\n                                    <div>\r\n                                        <NavLink to={`/profile/${u.id}`}><img src={u.photos.small || photos} className={styles.photos} /></NavLink>\r\n                                    </div>\r\n                                    <div className={styles.followedUser}>\r\n                                        <button onClick={() => dispatch(followUnfollowUser(!u.followed, u.id))} disabled={followInProgres.some(id => id === u.id)}>\r\n                                            {u.followed ? 'Unfollow' : 'Follow'}\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default React.memo(Users)","import React, { Dispatch } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getCurrentPage } from '../../redux/user-reducer'\r\nimport styles from './Pageinator.module.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    term: string\r\n    friend: boolean | null\r\n    totalCount: number\r\n    pageSize: number\r\n    porcionSize: number\r\n    porceNumber: number\r\n    currentPage: number\r\n    dispatch: Dispatch<any>\r\n}\r\nexport const Paginator: React.FC<PropsType> = ({ friend, term, totalCount, pageSize, porcionSize, porceNumber, currentPage,dispatch }) => {\r\n  \r\n\r\n    let pages = []\r\n    const pagesCount = Math.ceil(totalCount / pageSize)\r\n    const porceCount = Math.ceil(pagesCount / porcionSize)\r\n    let firstPage = (porceNumber - 1) * porcionSize + 1\r\n    let lastPage = porceNumber * porcionSize\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        if (i >= firstPage && i <= lastPage) {\r\n            pages.push(i)\r\n        }\r\n    }\r\n\r\n\r\n    let setCurrentPorceNumber = (porceNumber: number) => {\r\n        currentPage = (porceNumber - 1) * porcionSize + 1\r\n        dispatch(getCurrentPage(pageSize, currentPage, porceNumber, term, friend))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.pageinators}>\r\n            <div className={styles.pageinator}>\r\n                {porceNumber > 1 && <span onClick={() => setCurrentPorceNumber(porceNumber - 1)} className={styles.changer}>Prev</span>}\r\n                {pages.map(p => {\r\n                    return (\r\n                        <span key={p} onClick={() => dispatch(getCurrentPage(pageSize, p, porceNumber, term, friend))} className={currentPage === p ? styles.currentPage : '' + \"\" + styles.page}  >\r\n                            {p}\r\n                        </span>\r\n                    )\r\n                })}\r\n                {porceCount > porceNumber && <span onClick={() => setCurrentPorceNumber(porceNumber + 1)} className={styles.changer}>Next</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { FunctionComponent } from 'react'\r\nimport Users from './Users'\r\n// import { getUsers, getCurrentPage, followUnfollowUser, UserType, userActions } from '../../../redux/user-reducer'\r\n// import { connect } from 'react-redux'\r\n// import {\r\n//     pageSizeSelector, totalCountSelector, porcionSizeSelector, porceNumberSelector,\r\n//     currentPageSelector, usersSelector, followInProgresSelector, showLoaderSelector,\r\n//     termSelector, friendSelector,  filterFizibilitySelector\r\n// } from '../../../redux/selectores/users-selector'\r\nimport { compose } from 'redux'\r\nimport { WithClearProfileData } from '../../HOCS/Hocs'\r\n// import { RootState } from '../../../redux/reduxStore'\r\n\r\n\r\n\r\n\r\nconst MyUsersContainer: FunctionComponent= (props) => {\r\n    return (\r\n        <div>\r\n            <Users/>\r\n        </div>\r\n    )\r\n}\r\n// export type UserPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\n// type MapStateToPropsType = {\r\n//     term: string\r\n//     friend: boolean | null\r\n//     pageSize: number\r\n//     totalCount: number\r\n//     porcionSize: number\r\n//     porceNumber: number\r\n//     currentPage: number\r\n//     users: Array<UserType>\r\n//     followInProgres: Array<number>\r\n//     showLoader: boolean\r\n//     // filterVizibility: boolean\r\n// }\r\n// const setFilterVizibility = userActions.setFilterVizibility\r\n// type MapDispatchToProps = {\r\n//     getUsers: (pageSize: number, currentPage: number, term: string, friend: boolean | null) => void\r\n//     getCurrentPage: (pageSize: number, currentPage: number, porceNumber: number, term: string, friend: boolean | null) => void\r\n//     followUnfollowUser: (follow: boolean, id: number) => void\r\n//     setFilterVizibility: (filterVizibility: boolean) => void\r\n\r\n// }\r\n// let mapStateToProps = (state: RootState) => {\r\n//     return {\r\n//         term: termSelector(state),\r\n//         friend: friendSelector(state),\r\n//         pageSize: pageSizeSelector(state),\r\n//         totalCount: totalCountSelector(state),\r\n//         porcionSize: porcionSizeSelector(state),\r\n//         porceNumber: porceNumberSelector(state),\r\n//         currentPage: currentPageSelector(state),\r\n//         users: usersSelector(state),\r\n//         followInProgres: followInProgresSelector(state),\r\n//         showLoader: showLoaderSelector(state),\r\n//         filterVizibility: filterFizibilitySelector(state)\r\n//     }\r\n// }\r\nconst UsersContainer = compose<React.ComponentType>(WithClearProfileData\r\n    // , connect<MapStateToPropsType, MapDispatchToProps, {}, RootState>(\r\n    // mapStateToProps, { getUsers, getCurrentPage, followUnfollowUser, setFilterVizibility })\r\n    )(MyUsersContainer)\r\n    export default React.memo(UsersContainer)"],"sourceRoot":""}