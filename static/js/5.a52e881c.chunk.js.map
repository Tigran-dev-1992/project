{"version":3,"sources":["Components/Content/Dialogs/MessageForm.tsx","Components/Content/Dialogs/Message.tsx","redux/selectores/dialogs-selector.ts","Components/Content/Dialogs/Dialogs.tsx"],"names":["MessageForm","React","memo","handleSubmit","useState","setMessage","onSubmit","createField","Input","ReduxMessageForm","reduxForm","form","Message","chatUser","to","userId","src","photo","photos","style","height","width","message","chatUsersSelector","state","dialogs","chatUsers","setChatUsers","dialogsActions","ws","WebSocket","Dialogs","useSelector","dispatch","useDispatch","useEffect","addEventListener","e","JSON","parse","data","d","document","getElementById","scrollTo","top","scrollHeight","clientHeight","behavior","scrollToTop","overflowY","marginRight","id","map","index","key","value","length","send","reset","compose","WithClearProfileData","WithPaginatorVisibility","withRedirectToLogin"],"mappings":"gMAMaA,EAAyDC,IAAMC,MAAK,YAAuB,IAApBC,EAAmB,EAAnBA,aAAmB,EACrEC,mBAAS,IAD4D,mBACnFC,GADmF,WAEnG,OACI,6BACI,0BAAMC,SAAUH,GACXI,YAAY,UAAW,oBAAqB,GAAIC,IAAO,GAAI,IAC5D,4BAAQF,SAAU,kBAAMD,EAAW,MAAnC,aAMHI,EAAmBC,YAAyB,CAAEC,KAAM,WAAjCD,CAA6CV,G,0BCZhEY,EAAiDX,IAAMC,MAAK,YAAmB,IAAhBW,EAAe,EAAfA,SACxE,OACI,6BACI,kBAAC,IAAD,CAASC,GAAE,mBAAcD,EAASE,SAC9B,yBAAKC,IAAKH,EAASI,OAASC,IAAQC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,WAEvER,EAASS,Y,eCVTC,EAAkB,SAACC,GAAmB,OAAOA,EAAMC,QAAQC,WCSlEC,E,OAAeC,EAAeD,aAE9BE,EAAK,IAAIC,UAAU,gEACnBC,EAAoB9B,IAAMC,MAAK,WAEjC,IAKMwB,EAAYM,YAAYT,GACxBU,EAAWC,cACjBC,qBAAU,WACNN,EAAGO,iBAAiB,WAAW,SAACC,GAC5BJ,EAASN,EAAaW,KAAKC,MAAMF,EAAEG,QATvB,WAChB,IAAIC,EAAIC,SAASC,eAAe,MAChCF,GAAKA,EAAEG,SAAS,CAAEC,IAAKJ,EAAEK,aAAeL,EAAEM,aAAcC,SAAU,WAQ9DC,QAGL,IAOH,OACI,yBAAK9B,MAAO,CAAEC,OAAQ,QAAS8B,UAAW,OAAQC,YAAa,QAAUC,GAAI,MACzE,6BACK1B,EAAU2B,KAAI,SAACxC,EAAUyC,GAAX,OAAqB,kBAAC1C,EAAD,CAASC,SAAUA,EAAU0C,IAAKD,OACtE,6BACI,kBAAC7C,EAAD,CAAkBH,SAXjB,SAACkD,GACVA,EAAMlC,SAAWkC,EAAMlC,QAAQmC,SAC/B5B,EAAG6B,KAAKF,EAAMlC,SACdW,EAAS0B,YAAM,sBAcZC,sBAA6BC,IAAsBC,IAAyBC,IAA5EH,CAAiG7B","file":"static/js/5.a52e881c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { createField } from '../../commons/CreateField';\r\nimport { Input } from '../../commons/Input';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { ValueDataType } from './Dialogs';\r\n\r\nexport const MessageForm: React.FC<InjectedFormProps<ValueDataType>> =React.memo(({ handleSubmit }) => {\r\n    const [message, setMessage] = useState('');\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                {createField('message', 'enter new message', [], Input, {}, '')}\r\n                <button onSubmit={() => setMessage('')}>Send</button>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n});\r\nexport const ReduxMessageForm = reduxForm<ValueDataType>({ form: 'dialogs'})(MessageForm)\r\n","import React from 'react';\r\nimport { chatUsersType } from '../../../redux/dialogs-reducer';\r\nimport photos from '../../../images/userPhoto.jpg'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport const Message: React.FC<{ chatUser: chatUsersType }> = React.memo(({ chatUser }) => {\r\n    return (\r\n        <div >\r\n            <NavLink to={`/profile/${chatUser.userId}`}>\r\n                <img src={chatUser.photo || photos} style={{ height: '50px', width: \"50px\" }} />\r\n            </NavLink>\r\n            {chatUser.message}\r\n        </div>\r\n    );\r\n});\r\n","import { RootState } from \"../reduxStore\";\r\n\r\nexport const chatUsersSelector=(state:RootState)=>{return state.dialogs.chatUsers}","import React, { useEffect, useState } from 'react';\r\nimport { reset } from 'redux-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ReduxMessageForm } from './MessageForm';\r\nimport { Message } from \"./Message\";\r\nimport { compose } from 'redux';\r\nimport { WithClearProfileData, WithPaginatorVisibility, withRedirectToLogin } from '../../HOCS/Hocs';\r\nimport { chatUsersSelector } from '../../../redux/selectores/dialogs-selector';\r\nimport { dialogsActions } from '../../../redux/dialogs-reducer';\r\n\r\n\r\nconst setChatUsers = dialogsActions.setChatUsers\r\nexport type ValueDataType = { message: string }\r\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\nconst Dialogs: React.FC = React.memo(() => {\r\n\r\n    const scrollToTop = () => {\r\n        let d = document.getElementById('dd')\r\n        d && d.scrollTo({ top: d.scrollHeight - d.clientHeight, behavior: \"smooth\" })\r\n    }\r\n\r\n    const chatUsers = useSelector(chatUsersSelector)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        ws.addEventListener('message', (e) => {\r\n            dispatch(setChatUsers(JSON.parse(e.data)))\r\n            scrollToTop()\r\n\r\n        });\r\n    }, []);\r\n    const onSubmit = (value: ValueDataType) => {\r\n        if (value.message && value.message.length) {\r\n            ws.send(value.message);\r\n            dispatch(reset('dialogs'))\r\n        }\r\n    };\r\n    return (\r\n        <div style={{ height: '400px', overflowY: 'auto', marginRight: '40px' }} id={'dd'}>\r\n            <div >\r\n                {chatUsers.map((chatUser, index) => <Message chatUser={chatUser} key={index} />)}\r\n                <div>\r\n                    <ReduxMessageForm onSubmit={onSubmit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\nexport default compose<React.ComponentType>(WithClearProfileData, WithPaginatorVisibility, withRedirectToLogin)(Dialogs) \r\n"],"sourceRoot":""}